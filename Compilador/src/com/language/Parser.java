
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jul 16 23:26:57 UYT 2015
//----------------------------------------------------

package com.language;

import java.util.*;
import java_cup.runtime.*;
import com.language.*;
import com.language.model.expression.*;
import com.language.exceptions.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jul 16 23:26:57 UYT 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\006\004\000\002\002\004\000\002\005" +
    "\005\000\002\005\004\000\002\004\005\000\002\004\005" +
    "\000\002\004\004\000\002\004\007\000\002\004\007\000" +
    "\002\004\011\000\002\004\002\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\005\000\002\002\005" +
    "\000\002\002\004\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\004" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\004\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\003" +
    "\005\000\002\007\005\000\002\007\003\000\002\007\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\014\033\ufff7\037\005\046\011\050\012\053" +
    "\004\001\002\000\004\032\122\001\002\000\026\005\022" +
    "\015\023\031\020\035\024\053\017\054\013\055\025\056" +
    "\016\057\015\060\014\001\002\000\004\034\120\001\002" +
    "\000\004\033\116\001\002\000\004\002\115\001\002\000" +
    "\026\005\022\015\023\031\020\035\024\053\017\054\013" +
    "\055\025\056\016\057\015\060\014\001\002\000\026\005" +
    "\022\015\023\031\020\035\024\053\017\054\013\055\025" +
    "\056\016\057\015\060\014\001\002\000\064\004\ufff6\005" +
    "\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\014\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\033\ufff6" +
    "\036\ufff6\041\ufff6\042\ufff6\045\ufff6\001\002\000\064\004" +
    "\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2" +
    "\013\ufff2\014\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022" +
    "\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2" +
    "\033\ufff2\036\ufff2\041\ufff2\042\ufff2\045\ufff2\001\002\000" +
    "\064\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\016\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3" +
    "\030\ufff3\033\ufff3\036\ufff3\041\ufff3\042\ufff3\045\ufff3\001" +
    "\002\000\064\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\014\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4" +
    "\027\ufff4\030\ufff4\033\ufff4\036\ufff4\041\ufff4\042\ufff4\045" +
    "\ufff4\001\002\000\064\004\ufff1\005\ufff1\006\ufff1\007\ufff1" +
    "\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\027\ufff1\030\ufff1\033\ufff1\036\ufff1\041\ufff1\042" +
    "\ufff1\045\ufff1\001\002\000\026\005\022\015\023\031\020" +
    "\035\024\053\017\054\013\055\025\056\016\057\015\060" +
    "\014\001\002\000\054\004\036\005\053\006\037\007\031" +
    "\010\051\011\027\012\043\013\042\014\044\016\052\017" +
    "\047\020\050\021\030\022\033\023\045\024\035\025\046" +
    "\026\032\027\040\030\041\045\102\001\002\000\026\005" +
    "\022\015\023\031\020\035\024\053\017\054\013\055\025" +
    "\056\016\057\015\060\014\001\002\000\026\005\022\015" +
    "\023\031\020\035\024\053\017\054\013\055\025\056\016" +
    "\057\015\060\014\001\002\000\026\005\022\015\023\031" +
    "\020\035\024\053\017\054\013\055\025\056\016\057\015" +
    "\060\014\001\002\000\064\004\ufff5\005\ufff5\006\ufff5\007" +
    "\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\016\ufff5" +
    "\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025" +
    "\ufff5\026\ufff5\027\ufff5\030\ufff5\033\ufff5\036\ufff5\041\ufff5" +
    "\042\ufff5\045\ufff5\001\002\000\054\004\036\005\053\006" +
    "\037\007\031\010\051\011\027\012\043\013\042\014\044" +
    "\016\052\017\047\020\050\021\030\022\033\023\045\024" +
    "\035\025\046\026\032\027\040\030\041\036\034\001\002" +
    "\000\026\005\022\015\023\031\020\035\024\053\017\054" +
    "\013\055\025\056\016\057\015\060\014\001\002\000\026" +
    "\005\022\015\023\031\020\035\024\053\017\054\013\055" +
    "\025\056\016\057\015\060\014\001\002\000\026\005\022" +
    "\015\023\031\020\035\024\053\017\054\013\055\025\056" +
    "\016\057\015\060\014\001\002\000\026\005\022\015\023" +
    "\031\020\035\024\053\017\054\013\055\025\056\016\057" +
    "\015\060\014\001\002\000\026\005\022\015\023\031\020" +
    "\035\024\053\017\054\013\055\025\056\016\057\015\060" +
    "\014\001\002\000\064\004\uffe8\005\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\033\uffe8\036\uffe8\041\uffe8\042" +
    "\uffe8\045\uffe8\001\002\000\026\005\022\015\023\031\020" +
    "\035\024\053\017\054\013\055\025\056\016\057\015\060" +
    "\014\001\002\000\026\005\022\015\023\031\020\035\024" +
    "\053\017\054\013\055\025\056\016\057\015\060\014\001" +
    "\002\000\026\005\022\015\023\031\020\035\024\053\017" +
    "\054\013\055\025\056\016\057\015\060\014\001\002\000" +
    "\026\005\022\015\023\031\020\035\024\053\017\054\013" +
    "\055\025\056\016\057\015\060\014\001\002\000\026\005" +
    "\022\015\023\031\020\035\024\053\017\054\013\055\025" +
    "\056\016\057\015\060\014\001\002\000\026\005\022\015" +
    "\023\031\020\035\024\053\017\054\013\055\025\056\016" +
    "\057\015\060\014\001\002\000\026\005\022\015\023\031" +
    "\020\035\024\053\017\054\013\055\025\056\016\057\015" +
    "\060\014\001\002\000\026\005\022\015\023\031\020\035" +
    "\024\053\017\054\013\055\025\056\016\057\015\060\014" +
    "\001\002\000\026\005\022\015\023\031\020\035\024\053" +
    "\017\054\013\055\025\056\016\057\015\060\014\001\002" +
    "\000\026\005\022\015\023\031\020\035\024\053\017\054" +
    "\013\055\025\056\016\057\015\060\014\001\002\000\026" +
    "\005\022\015\023\031\020\035\024\053\017\054\013\055" +
    "\025\056\016\057\015\060\014\001\002\000\026\005\022" +
    "\015\023\031\020\035\024\053\017\054\013\055\025\056" +
    "\016\057\015\060\014\001\002\000\026\005\022\015\023" +
    "\031\020\035\024\053\017\054\013\055\025\056\016\057" +
    "\015\060\014\001\002\000\026\005\022\015\023\031\020" +
    "\035\024\053\017\054\013\055\025\056\016\057\015\060" +
    "\014\001\002\000\026\005\022\015\023\031\020\035\024" +
    "\053\017\054\013\055\025\056\016\057\015\060\014\001" +
    "\002\000\064\004\uffef\005\uffef\006\037\007\031\010\051" +
    "\011\027\012\043\013\042\014\044\016\052\017\047\020" +
    "\050\021\030\022\033\023\045\024\035\025\046\026\032" +
    "\027\040\030\041\033\uffef\036\uffef\041\uffef\042\uffef\045" +
    "\uffef\001\002\000\064\004\uffe7\005\uffe7\006\uffe7\007\uffe7" +
    "\010\051\011\uffe7\012\uffe7\013\uffe7\014\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\021\030\022\033\023\045\024\035\025\046" +
    "\026\032\027\040\030\041\033\uffe7\036\uffe7\041\uffe7\042" +
    "\uffe7\045\uffe7\001\002\000\064\004\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\016" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb" +
    "\025\uffeb\026\uffeb\027\uffeb\030\uffeb\033\uffeb\036\uffeb\041" +
    "\uffeb\042\uffeb\045\uffeb\001\002\000\064\004\uffe5\005\uffe5" +
    "\006\uffe5\007\uffe5\010\051\011\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\016\uffe5\017\uffe5\020\uffe5\021\030\022\033\023\045" +
    "\024\035\025\046\026\032\027\040\030\041\033\uffe5\036" +
    "\uffe5\041\uffe5\042\uffe5\045\uffe5\001\002\000\064\004\uffe6" +
    "\005\uffe6\006\uffe6\007\uffe6\010\051\011\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\016\uffe6\017\uffe6\020\uffe6\021\030\022\033" +
    "\023\045\024\035\025\046\026\032\027\040\030\041\033" +
    "\uffe6\036\uffe6\041\uffe6\042\uffe6\045\uffe6\001\002\000\064" +
    "\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\051\011\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\033\uffdb\036\uffdb\041\uffdb\042\uffdb\045\uffdb\001\002" +
    "\000\064\004\uffde\005\uffde\006\uffde\007\uffde\010\051\011" +
    "\uffde\012\uffde\013\uffde\014\uffde\016\uffde\017\uffde\020\uffde" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\033\uffde\036\uffde\041\uffde\042\uffde\045\uffde" +
    "\001\002\000\064\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010" +
    "\051\011\uffe3\012\uffe3\013\uffe3\014\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\021\030\022\033\023\045\024\035\025\046\026" +
    "\032\027\040\030\041\033\uffe3\036\uffe3\041\uffe3\042\uffe3" +
    "\045\uffe3\001\002\000\064\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\051\011\uffe9\012\uffe9\013\uffe9\014\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\030\022\033\023\045\024\035\025" +
    "\046\026\032\027\040\030\041\033\uffe9\036\uffe9\041\uffe9" +
    "\042\uffe9\045\uffe9\001\002\000\064\004\uffe4\005\uffe4\006" +
    "\uffe4\007\uffe4\010\051\011\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\030\022\033\023\045\024" +
    "\035\025\046\026\032\027\040\030\041\033\uffe4\036\uffe4" +
    "\041\uffe4\042\uffe4\045\uffe4\001\002\000\064\004\uffd9\005" +
    "\uffd9\006\uffd9\007\uffd9\010\051\011\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\033\uffd9" +
    "\036\uffd9\041\uffd9\042\uffd9\045\uffd9\001\002\000\064\004" +
    "\uffda\005\uffda\006\uffda\007\uffda\010\051\011\uffda\012\uffda" +
    "\013\uffda\014\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\033\uffda\036\uffda\041\uffda\042\uffda\045\uffda\001\002\000" +
    "\064\004\uffed\005\uffed\006\uffed\007\uffed\010\051\011\uffed" +
    "\012\uffed\013\uffed\014\uffed\016\uffed\017\uffed\020\uffed\021" +
    "\030\022\033\023\045\024\035\025\046\026\032\027\040" +
    "\030\041\033\uffed\036\uffed\041\uffed\042\uffed\045\uffed\001" +
    "\002\000\064\004\ufff0\005\ufff0\006\037\007\031\010\051" +
    "\011\027\012\043\013\042\014\044\016\052\017\047\020" +
    "\050\021\030\022\033\023\045\024\035\025\046\026\032" +
    "\027\040\030\041\033\ufff0\036\ufff0\041\ufff0\042\ufff0\045" +
    "\ufff0\001\002\000\064\004\uffdf\005\uffdf\006\uffdf\007\uffdf" +
    "\010\051\011\uffdf\012\uffdf\013\uffdf\014\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\033\uffdf\036\uffdf\041\uffdf\042" +
    "\uffdf\045\uffdf\001\002\000\064\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\010\051\011\uffe0\012\uffe0\013\uffe0\014\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\030\uffe0\033\uffe0\036\uffe0\041" +
    "\uffe0\042\uffe0\045\uffe0\001\002\000\064\004\uffdd\005\uffdd" +
    "\006\uffdd\007\uffdd\010\051\011\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\033\uffdd\036" +
    "\uffdd\041\uffdd\042\uffdd\045\uffdd\001\002\000\064\004\uffec" +
    "\005\uffec\006\uffec\007\uffec\010\051\011\uffec\012\uffec\013" +
    "\uffec\014\uffec\016\uffec\017\uffec\020\uffec\021\030\022\033" +
    "\023\045\024\035\025\046\026\032\027\040\030\041\033" +
    "\uffec\036\uffec\041\uffec\042\uffec\045\uffec\001\002\000\064" +
    "\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\051\011\uffe1\012" +
    "\uffe1\013\uffe1\014\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\033\uffe1\036\uffe1\041\uffe1\042\uffe1\045\uffe1\001\002" +
    "\000\064\004\uffea\005\uffea\006\uffea\007\uffea\010\051\011" +
    "\uffea\012\uffea\013\uffea\014\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\030\022\033\023\045\024\035\025\046\026\032\027" +
    "\040\030\041\033\uffea\036\uffea\041\uffea\042\uffea\045\uffea" +
    "\001\002\000\064\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\033\uffe2\036\uffe2\041\uffe2\042\uffe2" +
    "\045\uffe2\001\002\000\064\004\uffee\005\uffee\006\037\007" +
    "\031\010\051\011\027\012\043\013\042\014\044\016\052" +
    "\017\047\020\050\021\030\022\033\023\045\024\035\025" +
    "\046\026\032\027\040\030\041\033\uffee\036\uffee\041\uffee" +
    "\042\uffee\045\uffee\001\002\000\014\033\ufff7\037\005\046" +
    "\011\050\012\053\004\001\002\000\006\051\104\052\105" +
    "\001\002\000\014\033\ufff7\037\005\046\011\050\012\053" +
    "\004\001\002\000\004\033\ufff9\001\002\000\004\052\107" +
    "\001\002\000\004\033\ufff8\001\002\000\064\004\uffdc\005" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\033\uffdc" +
    "\036\uffdc\041\uffdc\042\uffdc\045\uffdc\001\002\000\054\004" +
    "\036\005\053\006\037\007\031\010\051\011\027\012\043" +
    "\013\042\014\044\016\052\017\047\020\050\021\030\022" +
    "\033\023\045\024\035\025\046\026\032\027\040\030\041" +
    "\045\112\001\002\000\014\033\ufff7\037\005\046\011\050" +
    "\012\053\004\001\002\000\004\047\114\001\002\000\004" +
    "\033\ufffa\001\002\000\004\002\000\001\002\000\024\033" +
    "\ufff7\034\ufffe\037\005\046\011\047\ufffe\050\012\051\ufffe" +
    "\052\ufffe\053\004\001\002\000\012\034\uffff\047\uffff\051" +
    "\uffff\052\uffff\001\002\000\004\002\001\001\002\000\054" +
    "\004\036\005\053\006\037\007\031\010\051\011\027\012" +
    "\043\013\042\014\044\016\052\017\047\020\050\021\030" +
    "\022\033\023\045\024\035\025\046\026\032\027\040\030" +
    "\041\033\ufffb\001\002\000\030\005\022\015\023\031\020" +
    "\035\024\040\125\053\017\054\013\055\025\056\016\057" +
    "\015\060\014\001\002\000\004\033\ufffc\001\002\000\054" +
    "\004\036\005\053\006\037\007\031\010\051\011\027\012" +
    "\043\013\042\014\044\016\052\017\047\020\050\021\030" +
    "\022\033\023\045\024\035\025\046\026\032\027\040\030" +
    "\041\033\ufffd\001\002\000\030\005\022\015\023\031\020" +
    "\035\024\040\125\053\017\054\013\055\025\056\016\057" +
    "\015\060\014\001\002\000\004\041\uffd6\001\002\000\004" +
    "\041\133\001\002\000\056\004\036\005\053\006\037\007" +
    "\031\010\051\011\027\012\043\013\042\014\044\016\052" +
    "\017\047\020\050\021\030\022\033\023\045\024\035\025" +
    "\046\026\032\027\040\030\041\041\uffd5\042\131\001\002" +
    "\000\030\005\022\015\023\031\020\035\024\040\125\053" +
    "\017\054\013\055\025\056\016\057\015\060\014\001\002" +
    "\000\004\041\uffd7\001\002\000\006\033\uffd8\041\uffd8\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\010\004\006\005\005\006\007\001\001\000" +
    "\002\001\001\000\004\002\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\110\001" +
    "\001\000\004\002\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\107\001\001\000\002\001\001\000\004" +
    "\002\100\001\001\000\004\002\077\001\001\000\004\002" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\076\001\001\000\004\002\075\001\001\000\004\002" +
    "\074\001\001\000\004\002\073\001\001\000\004\002\072" +
    "\001\001\000\002\001\001\000\004\002\071\001\001\000" +
    "\004\002\070\001\001\000\004\002\067\001\001\000\004" +
    "\002\066\001\001\000\004\002\065\001\001\000\004\002" +
    "\064\001\001\000\004\002\063\001\001\000\004\002\062" +
    "\001\001\000\004\002\061\001\001\000\004\002\060\001" +
    "\001\000\004\002\057\001\001\000\004\002\056\001\001" +
    "\000\004\002\055\001\001\000\004\002\054\001\001\000" +
    "\004\002\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\006\005\102\001\001\000\002\001" +
    "\001\000\006\004\006\005\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\006\005\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\006\005\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\123\003\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\127\003\125" +
    "\007\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\127\003\125\007\131\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // elista ::= expr 
            {
              TEstructuradoLista RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new TEstructuradoLista(e);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elista",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // elista ::= exprlista 
            {
              TEstructuradoLista RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new TEstructuradoLista(e);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elista",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // elista ::= expr COMMA elista 
            {
              TEstructuradoLista RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TEstructuradoLista el = (TEstructuradoLista)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new TEstructuradoLista(e, el);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elista",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exprlista ::= LPARENCUADRADO elista RPARENCUADRADO 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TEstructuradoLista e = (TEstructuradoLista)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new TEstructuradoLista(e);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlista",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr MAYOR_IGUAL expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.MAYOR_IGUAL);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr MENOR_IGUAL expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.MENOR_IGUAL);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr MAYOR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.MAYOR);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= NOT expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,null,TipoOperadorBooleano.NOT);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr MENOR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.MENOR);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr DISTINTO expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.DISTINTO);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr IGUAL expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.IGUAL);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr OR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.OR);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr AND expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.AND);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= COMPLEMENTO expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBitwise(l,null,TipoOperadorBitwise.COMPLEMENTO);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr SHIFT_DER expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.SHIFT_DER);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr SHIFT_IZQ expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.SHIFT_IZQ);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr BXOR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.XOR);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr BOR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.OR);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr BAND expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.AND);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = e;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr MODULO expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.MODULO);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr DIVISION_ENTERA expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.DIVISION_ENTERA);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr EXPONENTE expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.EXPONENTE);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr MULTIPLICACION expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.MULTIPLICACION);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr DIVISION expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.DIVISION);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= RESTA expr 
            {
              Expr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Valor v = new Valor(0, null, 0,false,0, TipoValor.INT);
				RESULT = new OperacionBinaria(v,r,TipoOperadorBinario.RESTA);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr RESTA expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.RESTA);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr SUMA expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.SUMA);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= ID 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Var(i);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= LONG 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Valor v = new Valor(0, null, 0,false,new Long( l), TipoValor.LONG);
				RESULT = new Const(v);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= BOOLEAN 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Valor v = new Valor(0, null, 0, b, 0, TipoValor.BOOL);
				RESULT = new Const(v);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= STRING 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Valor v = new Valor(0, s, 0, false, 0, TipoValor.STRING);
				RESULT = new Const(v);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= FLOAT 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Valor v = new Valor(new Float(f), null, 0, false, 0, TipoValor.FLOAT);
				RESULT = new Const(v);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= INT 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Valor v = new Valor(0, null, new Integer(i), false, 0, TipoValor.INT);
				RESULT = new Const(v);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // comm ::= 
            {
              Comm RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // comm ::= IF expr DOSPUNTOS lcomm ELSE lcomm ENDIF 
            {
              Comm RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ListComm l1 = (ListComm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ListComm l2 = (ListComm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new IfThenElse(e, l1, l2);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // comm ::= IF expr DOSPUNTOS lcomm ENDIF 
            {
              Comm RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ListComm l = (ListComm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new IfThen(e, l);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // comm ::= WHILE expr DOSPUNTOS lcomm ENDWHILE 
            {
              Comm RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ListComm l = (ListComm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new While(e, l);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // comm ::= PRINT expr 
            {
              Comm RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Print(e);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // comm ::= ID EQUAL exprlista 
            {
              Comm RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr el = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Var v = new Var(i);
				RESULT = new AsignacionLista(v, el);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // comm ::= ID EQUAL expr 
            {
              Comm RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Var v = new Var(i);
				RESULT = new Asignacion(e, v);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lcomm ::= comm SEPARADOR 
            {
              ListComm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Comm c = (Comm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					
					RESULT = new ListComm(c);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lcomm",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lcomm ::= comm SEPARADOR lcomm 
            {
              ListComm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Comm c = (Comm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ListComm l = (ListComm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					
					RESULT = new ListComm(c, l);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lcomm",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // prog ::= lcomm END 
            {
              Programa RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ListComm l = (ListComm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					
					RESULT = new Programa(l);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

