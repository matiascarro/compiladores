
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jul 17 11:15:27 UYT 2015
//----------------------------------------------------

package com.language;

import java.util.*;
import java_cup.runtime.*;
import com.language.*;
import com.language.model.expression.*;
import com.language.exceptions.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jul 17 11:15:27 UYT 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\011\004\000\002\002\004\000\002\010" +
    "\005\000\002\010\004\000\002\007\005\000\002\007\005" +
    "\000\002\007\010\000\002\007\004\000\002\007\007\000" +
    "\002\007\007\000\002\007\011\000\002\007\007\000\002" +
    "\007\010\000\002\007\012\000\002\007\012\000\002\007" +
    "\007\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\005\000\002\002\005\000\002\002\004\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\004\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\004\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\007\000\002\002\010\000" +
    "\002\002\012\000\002\003\005\000\002\014\005\000\002" +
    "\014\003\000\002\014\003\000\002\005\005\000\002\006" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\014\040\005\047\012\051\013\074\006\075" +
    "\004\001\002\000\010\032\146\034\150\036\147\001\002" +
    "\000\026\005\023\015\024\031\021\036\025\075\020\076" +
    "\014\077\026\100\017\101\016\102\015\001\002\000\004" +
    "\075\133\001\002\000\004\035\132\001\002\000\004\033" +
    "\130\001\002\000\004\002\127\001\002\000\026\005\023" +
    "\015\024\031\021\036\025\075\020\076\014\077\026\100" +
    "\017\101\016\102\015\001\002\000\026\005\023\015\024" +
    "\031\021\036\025\075\020\076\014\077\026\100\017\101" +
    "\016\102\015\001\002\000\064\004\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1" +
    "\025\ufff1\026\ufff1\027\ufff1\030\ufff1\033\ufff1\037\ufff1\042" +
    "\ufff1\043\ufff1\046\ufff1\001\002\000\064\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014" +
    "\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\033\uffed\037" +
    "\uffed\042\uffed\043\uffed\046\uffed\001\002\000\064\004\uffee" +
    "\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013" +
    "\uffee\014\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\033" +
    "\uffee\037\uffee\042\uffee\043\uffee\046\uffee\001\002\000\064" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012" +
    "\uffef\013\uffef\014\uffef\016\uffef\017\uffef\020\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030" +
    "\uffef\033\uffef\037\uffef\042\uffef\043\uffef\046\uffef\001\002" +
    "\000\066\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\012\uffec\013\uffec\014\uffec\016\uffec\017\uffec\020\uffec" +
    "\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027" +
    "\uffec\030\uffec\033\uffec\034\112\037\uffec\042\uffec\043\uffec" +
    "\046\uffec\001\002\000\026\005\023\015\024\031\021\036" +
    "\025\075\020\076\014\077\026\100\017\101\016\102\015" +
    "\001\002\000\054\004\037\005\054\006\040\007\032\010" +
    "\052\011\030\012\044\013\043\014\045\016\053\017\050" +
    "\020\051\021\031\022\034\023\046\024\036\025\047\026" +
    "\033\027\041\030\042\046\103\001\002\000\026\005\023" +
    "\015\024\031\021\036\025\075\020\076\014\077\026\100" +
    "\017\101\016\102\015\001\002\000\026\005\023\015\024" +
    "\031\021\036\025\075\020\076\014\077\026\100\017\101" +
    "\016\102\015\001\002\000\026\005\023\015\024\031\021" +
    "\036\025\075\020\076\014\077\026\100\017\101\016\102" +
    "\015\001\002\000\064\004\ufff0\005\ufff0\006\ufff0\007\ufff0" +
    "\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\016\ufff0\017" +
    "\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\026\ufff0\027\ufff0\030\ufff0\033\ufff0\037\ufff0\042\ufff0\043" +
    "\ufff0\046\ufff0\001\002\000\054\004\037\005\054\006\040" +
    "\007\032\010\052\011\030\012\044\013\043\014\045\016" +
    "\053\017\050\020\051\021\031\022\034\023\046\024\036" +
    "\025\047\026\033\027\041\030\042\037\035\001\002\000" +
    "\026\005\023\015\024\031\021\036\025\075\020\076\014" +
    "\077\026\100\017\101\016\102\015\001\002\000\026\005" +
    "\023\015\024\031\021\036\025\075\020\076\014\077\026" +
    "\100\017\101\016\102\015\001\002\000\026\005\023\015" +
    "\024\031\021\036\025\075\020\076\014\077\026\100\017" +
    "\101\016\102\015\001\002\000\026\005\023\015\024\031" +
    "\021\036\025\075\020\076\014\077\026\100\017\101\016" +
    "\102\015\001\002\000\026\005\023\015\024\031\021\036" +
    "\025\075\020\076\014\077\026\100\017\101\016\102\015" +
    "\001\002\000\064\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\033\uffe3\037\uffe3\042\uffe3\043\uffe3" +
    "\046\uffe3\001\002\000\026\005\023\015\024\031\021\036" +
    "\025\075\020\076\014\077\026\100\017\101\016\102\015" +
    "\001\002\000\026\005\023\015\024\031\021\036\025\075" +
    "\020\076\014\077\026\100\017\101\016\102\015\001\002" +
    "\000\026\005\023\015\024\031\021\036\025\075\020\076" +
    "\014\077\026\100\017\101\016\102\015\001\002\000\026" +
    "\005\023\015\024\031\021\036\025\075\020\076\014\077" +
    "\026\100\017\101\016\102\015\001\002\000\026\005\023" +
    "\015\024\031\021\036\025\075\020\076\014\077\026\100" +
    "\017\101\016\102\015\001\002\000\026\005\023\015\024" +
    "\031\021\036\025\075\020\076\014\077\026\100\017\101" +
    "\016\102\015\001\002\000\026\005\023\015\024\031\021" +
    "\036\025\075\020\076\014\077\026\100\017\101\016\102" +
    "\015\001\002\000\026\005\023\015\024\031\021\036\025" +
    "\075\020\076\014\077\026\100\017\101\016\102\015\001" +
    "\002\000\026\005\023\015\024\031\021\036\025\075\020" +
    "\076\014\077\026\100\017\101\016\102\015\001\002\000" +
    "\026\005\023\015\024\031\021\036\025\075\020\076\014" +
    "\077\026\100\017\101\016\102\015\001\002\000\026\005" +
    "\023\015\024\031\021\036\025\075\020\076\014\077\026" +
    "\100\017\101\016\102\015\001\002\000\026\005\023\015" +
    "\024\031\021\036\025\075\020\076\014\077\026\100\017" +
    "\101\016\102\015\001\002\000\026\005\023\015\024\031" +
    "\021\036\025\075\020\076\014\077\026\100\017\101\016" +
    "\102\015\001\002\000\026\005\023\015\024\031\021\036" +
    "\025\075\020\076\014\077\026\100\017\101\016\102\015" +
    "\001\002\000\026\005\023\015\024\031\021\036\025\075" +
    "\020\076\014\077\026\100\017\101\016\102\015\001\002" +
    "\000\064\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011" +
    "\uffea\012\uffea\013\uffea\014\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027" +
    "\uffea\030\uffea\033\uffea\037\uffea\042\uffea\043\uffea\046\uffea" +
    "\001\002\000\064\004\037\005\054\006\uffe2\007\uffe2\010" +
    "\052\011\uffe2\012\uffe2\013\uffe2\014\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\031\022\034\023\046\024\036\025\047\026" +
    "\033\027\041\030\042\033\uffe2\037\uffe2\042\uffe2\043\uffe2" +
    "\046\uffe2\001\002\000\064\004\037\005\054\006\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\033\uffe6\037\uffe6\042\uffe6" +
    "\043\uffe6\046\uffe6\001\002\000\064\004\037\005\054\006" +
    "\uffe0\007\uffe0\010\052\011\uffe0\012\uffe0\013\uffe0\014\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\021\031\022\034\023\046\024" +
    "\036\025\047\026\033\027\041\030\042\033\uffe0\037\uffe0" +
    "\042\uffe0\043\uffe0\046\uffe0\001\002\000\064\004\037\005" +
    "\054\006\uffe1\007\uffe1\010\052\011\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\016\uffe1\017\uffe1\020\uffe1\021\031\022\034\023" +
    "\046\024\036\025\047\026\033\027\041\030\042\033\uffe1" +
    "\037\uffe1\042\uffe1\043\uffe1\046\uffe1\001\002\000\064\004" +
    "\037\005\054\006\uffd6\007\uffd6\010\052\011\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\033\uffd6\037\uffd6\042\uffd6\043\uffd6\046\uffd6\001\002\000" +
    "\064\004\037\005\054\006\uffd9\007\uffd9\010\052\011\uffd9" +
    "\012\uffd9\013\uffd9\014\uffd9\016\uffd9\017\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\033\uffd9\037\uffd9\042\uffd9\043\uffd9\046\uffd9\001" +
    "\002\000\064\004\037\005\054\006\uffde\007\uffde\010\052" +
    "\011\uffde\012\uffde\013\uffde\014\uffde\016\uffde\017\uffde\020" +
    "\uffde\021\031\022\034\023\046\024\036\025\047\026\033" +
    "\027\041\030\042\033\uffde\037\uffde\042\uffde\043\uffde\046" +
    "\uffde\001\002\000\064\004\037\005\054\006\uffe4\007\uffe4" +
    "\010\052\011\uffe4\012\uffe4\013\uffe4\014\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\031\022\034\023\046\024\036\025\047" +
    "\026\033\027\041\030\042\033\uffe4\037\uffe4\042\uffe4\043" +
    "\uffe4\046\uffe4\001\002\000\064\004\037\005\054\006\uffdf" +
    "\007\uffdf\010\052\011\uffdf\012\uffdf\013\uffdf\014\uffdf\016" +
    "\uffdf\017\uffdf\020\uffdf\021\031\022\034\023\046\024\036" +
    "\025\047\026\033\027\041\030\042\033\uffdf\037\uffdf\042" +
    "\uffdf\043\uffdf\046\uffdf\001\002\000\064\004\037\005\054" +
    "\006\uffd4\007\uffd4\010\052\011\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\033\uffd4\037" +
    "\uffd4\042\uffd4\043\uffd4\046\uffd4\001\002\000\064\004\037" +
    "\005\054\006\uffd5\007\uffd5\010\052\011\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\033" +
    "\uffd5\037\uffd5\042\uffd5\043\uffd5\046\uffd5\001\002\000\064" +
    "\004\037\005\054\006\uffe8\007\uffe8\010\052\011\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\016\uffe8\017\uffe8\020\uffe8\021\031" +
    "\022\034\023\046\024\036\025\047\026\033\027\041\030" +
    "\042\033\uffe8\037\uffe8\042\uffe8\043\uffe8\046\uffe8\001\002" +
    "\000\064\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\014\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\033\uffeb\037\uffeb\042\uffeb\043\uffeb\046\uffeb" +
    "\001\002\000\064\004\037\005\054\006\uffda\007\uffda\010" +
    "\052\011\uffda\012\uffda\013\uffda\014\uffda\016\uffda\017\uffda" +
    "\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\030\uffda\033\uffda\037\uffda\042\uffda\043\uffda" +
    "\046\uffda\001\002\000\064\004\037\005\054\006\uffdb\007" +
    "\uffdb\010\052\011\uffdb\012\uffdb\013\uffdb\014\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\033\uffdb\037\uffdb\042\uffdb" +
    "\043\uffdb\046\uffdb\001\002\000\064\004\037\005\054\006" +
    "\uffd8\007\uffd8\010\052\011\uffd8\012\uffd8\013\uffd8\014\uffd8" +
    "\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\033\uffd8\037\uffd8" +
    "\042\uffd8\043\uffd8\046\uffd8\001\002\000\064\004\037\005" +
    "\054\006\uffe7\007\uffe7\010\052\011\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\016\uffe7\017\uffe7\020\uffe7\021\031\022\034\023" +
    "\046\024\036\025\047\026\033\027\041\030\042\033\uffe7" +
    "\037\uffe7\042\uffe7\043\uffe7\046\uffe7\001\002\000\064\004" +
    "\037\005\054\006\uffdc\007\uffdc\010\052\011\uffdc\012\uffdc" +
    "\013\uffdc\014\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\033\uffdc\037\uffdc\042\uffdc\043\uffdc\046\uffdc\001\002\000" +
    "\064\004\037\005\054\006\uffe5\007\uffe5\010\052\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\016\uffe5\017\uffe5\020\uffe5\021" +
    "\031\022\034\023\046\024\036\025\047\026\033\027\041" +
    "\030\042\033\uffe5\037\uffe5\042\uffe5\043\uffe5\046\uffe5\001" +
    "\002\000\064\004\037\005\054\006\uffdd\007\uffdd\010\uffdd" +
    "\011\uffdd\012\uffdd\013\uffdd\014\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\033\uffdd\037\uffdd\042\uffdd\043\uffdd\046" +
    "\uffdd\001\002\000\064\004\uffe9\005\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\033\uffe9\037\uffe9\042\uffe9\043" +
    "\uffe9\046\uffe9\001\002\000\014\040\005\047\012\051\013" +
    "\074\006\075\004\001\002\000\006\052\105\053\106\001" +
    "\002\000\014\040\005\047\012\051\013\074\006\075\004" +
    "\001\002\000\004\033\ufff8\001\002\000\004\053\110\001" +
    "\002\000\004\033\ufff7\001\002\000\064\004\037\005\054" +
    "\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\033\uffd7\037" +
    "\uffd7\042\uffd7\043\uffd7\046\uffd7\001\002\000\004\075\113" +
    "\001\002\000\004\036\114\001\002\000\030\005\023\015" +
    "\024\031\021\036\025\037\115\075\020\076\014\077\026" +
    "\100\017\101\016\102\015\001\002\000\064\004\uffd3\005" +
    "\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3" +
    "\014\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023" +
    "\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\033\uffd3" +
    "\037\uffd3\042\uffd3\043\uffd3\046\uffd3\001\002\000\056\004" +
    "\037\005\054\006\040\007\032\010\052\011\030\012\044" +
    "\013\043\014\045\016\053\017\050\020\051\021\031\022" +
    "\034\023\046\024\036\025\047\026\033\027\041\030\042" +
    "\037\117\043\120\001\002\000\064\004\uffd2\005\uffd2\006" +
    "\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024" +
    "\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\033\uffd2\037\uffd2" +
    "\042\uffd2\043\uffd2\046\uffd2\001\002\000\026\005\023\015" +
    "\024\031\021\036\025\075\020\076\014\077\026\100\017" +
    "\101\016\102\015\001\002\000\054\004\037\005\054\006" +
    "\040\007\032\010\052\011\030\012\044\013\043\014\045" +
    "\016\053\017\050\020\051\021\031\022\034\023\046\024" +
    "\036\025\047\026\033\027\041\030\042\037\122\001\002" +
    "\000\064\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\016\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\033\uffd1\037\uffd1\042\uffd1\043\uffd1\046\uffd1" +
    "\001\002\000\054\004\037\005\054\006\040\007\032\010" +
    "\052\011\030\012\044\013\043\014\045\016\053\017\050" +
    "\020\051\021\031\022\034\023\046\024\036\025\047\026" +
    "\033\027\041\030\042\046\124\001\002\000\014\040\005" +
    "\047\012\051\013\074\006\075\004\001\002\000\004\050" +
    "\126\001\002\000\004\033\ufff9\001\002\000\004\002\000" +
    "\001\002\000\024\035\ufffe\040\005\047\012\050\ufffe\051" +
    "\013\052\ufffe\053\ufffe\074\006\075\004\001\002\000\012" +
    "\035\uffff\050\uffff\052\uffff\053\uffff\001\002\000\004\002" +
    "\001\001\002\000\004\036\134\001\002\000\002\001\002" +
    "\000\004\043\143\001\002\000\004\037\137\001\002\000" +
    "\004\046\140\001\002\000\014\040\005\047\012\051\013" +
    "\074\006\075\004\001\002\000\002\001\002\000\004\033" +
    "\ufff3\001\002\000\002\001\002\000\004\037\uffcc\001\002" +
    "\000\054\004\037\005\054\006\040\007\032\010\052\011" +
    "\030\012\044\013\043\014\045\016\053\017\050\020\051" +
    "\021\031\022\034\023\046\024\036\025\047\026\033\027" +
    "\041\030\042\033\ufffa\001\002\000\030\005\023\015\024" +
    "\031\021\036\025\041\172\075\170\076\014\077\026\100" +
    "\017\101\016\102\015\001\002\000\026\005\023\015\024" +
    "\031\021\036\025\075\020\076\014\077\026\100\017\101" +
    "\016\102\015\001\002\000\004\075\151\001\002\000\004" +
    "\036\152\001\002\000\030\005\023\015\024\031\021\036" +
    "\025\037\153\075\020\076\014\077\026\100\017\101\016" +
    "\102\015\001\002\000\004\033\ufff6\001\002\000\056\004" +
    "\037\005\054\006\040\007\032\010\052\011\030\012\044" +
    "\013\043\014\045\016\053\017\050\020\051\021\031\022" +
    "\034\023\046\024\036\025\047\026\033\027\041\030\042" +
    "\037\155\043\156\001\002\000\004\033\ufff5\001\002\000" +
    "\026\005\023\015\024\031\021\036\025\075\020\076\014" +
    "\077\026\100\017\101\016\102\015\001\002\000\054\004" +
    "\037\005\054\006\040\007\032\010\052\011\030\012\044" +
    "\013\043\014\045\016\053\017\050\020\051\021\031\022" +
    "\034\023\046\024\036\025\047\026\033\027\041\030\042" +
    "\037\160\001\002\000\004\033\ufff4\001\002\000\004\037" +
    "\165\001\002\000\054\004\037\005\054\006\040\007\032" +
    "\010\052\011\030\012\044\013\043\014\045\016\053\017" +
    "\050\020\051\021\031\022\034\023\046\024\036\025\047" +
    "\026\033\027\041\030\042\043\163\001\002\000\026\005" +
    "\023\015\024\031\021\036\025\075\020\076\014\077\026" +
    "\100\017\101\016\102\015\001\002\000\004\037\uffcb\001" +
    "\002\000\004\033\166\001\002\000\004\033\ufff2\001\002" +
    "\000\004\033\ufffc\001\002\000\060\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec" +
    "\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024" +
    "\uffec\025\uffec\026\uffec\027\uffec\030\uffec\033\uffec\034\112" +
    "\041\201\001\002\000\054\004\037\005\054\006\040\007" +
    "\032\010\052\011\030\012\044\013\043\014\045\016\053" +
    "\017\050\020\051\021\031\022\034\023\046\024\036\025" +
    "\047\026\033\027\041\030\042\033\ufffd\001\002\000\030" +
    "\005\023\015\024\031\021\036\025\041\172\075\020\076" +
    "\014\077\026\100\017\101\016\102\015\001\002\000\004" +
    "\042\uffce\001\002\000\004\042\200\001\002\000\056\004" +
    "\037\005\054\006\040\007\032\010\052\011\030\012\044" +
    "\013\043\014\045\016\053\017\050\020\051\021\031\022" +
    "\034\023\046\024\036\025\047\026\033\027\041\030\042" +
    "\042\uffcd\043\176\001\002\000\030\005\023\015\024\031" +
    "\021\036\025\041\172\075\020\076\014\077\026\100\017" +
    "\101\016\102\015\001\002\000\004\042\uffcf\001\002\000" +
    "\006\033\uffd0\042\uffd0\001\002\000\004\076\202\001\002" +
    "\000\004\042\203\001\002\000\004\033\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\010\007\007\010\006\011\010\001\001\000" +
    "\002\001\001\000\004\002\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\122\001\001\000\004\002\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\110\001\001\000\002" +
    "\001\001\000\004\002\101\001\001\000\004\002\100\001" +
    "\001\000\004\002\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\077\001\001\000\004\002\076\001" +
    "\001\000\004\002\075\001\001\000\004\002\074\001\001" +
    "\000\004\002\073\001\001\000\002\001\001\000\004\002" +
    "\072\001\001\000\004\002\071\001\001\000\004\002\070" +
    "\001\001\000\004\002\067\001\001\000\004\002\066\001" +
    "\001\000\004\002\065\001\001\000\004\002\064\001\001" +
    "\000\004\002\063\001\001\000\004\002\062\001\001\000" +
    "\004\002\061\001\001\000\004\002\060\001\001\000\004" +
    "\002\057\001\001\000\004\002\056\001\001\000\004\002" +
    "\055\001\001\000\004\002\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\007\010\103\001" +
    "\001\000\002\001\001\000\006\007\007\010\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\007\010" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\007\010\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\135" +
    "\012\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\007\010\140\001\001\000\004" +
    "\013\141\001\001\000\002\001\001\000\006\005\143\012" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\170\003\166\001\001\000\006\002\161\006\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\161\006\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\174\003\172\014\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\174\003\172\014\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // listaExpr ::= expr COMMA listaExpr 
            {
              ListaExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ListaExpr le = (ListaExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new ListaExpr(e,le);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaExpr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // lvar ::= var COMMA lvar 
            {
              ListaVar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ListaVar lv = (ListaVar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new ListaVar(v,lv);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lvar",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // elista ::= expr 
            {
              TEstructuradoLista RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new TEstructuradoLista(e);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elista",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // elista ::= exprlista 
            {
              TEstructuradoLista RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new TEstructuradoLista(e);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elista",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // elista ::= expr COMMA elista 
            {
              TEstructuradoLista RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TEstructuradoLista el = (TEstructuradoLista)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new TEstructuradoLista(e, el);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elista",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exprlista ::= LPARENCUADRADO elista RPARENCUADRADO 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TEstructuradoLista e = (TEstructuradoLista)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new TEstructuradoLista(e);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlista",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= ID DOT ID LPAREN expr COMMA expr RPAREN 
            {
              Expr RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				Var variable = new Var(i1);
				Var nombreFuncion = new Var("i2");
				RESULT = new OperacionesPredefinidas(variable, nombreFuncion, e1, e2);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= ID DOT ID LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				Var variable = new Var(i1);
				Var nombreFuncion = new Var("i2");
				RESULT = new OperacionesPredefinidas(variable, nombreFuncion, e, null);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= ID DOT ID LPAREN RPAREN 
            {
              Expr RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
				Var variable = new Var(i1);
				Var nombreFuncion = new Var("i2");
				RESULT = new OperacionesPredefinidas(variable, nombreFuncion, null, null);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr MAYOR_IGUAL expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.MAYOR_IGUAL);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr MENOR_IGUAL expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.MENOR_IGUAL);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr MAYOR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.MAYOR);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= NOT expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,null,TipoOperadorBooleano.NOT);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr MENOR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.MENOR);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr DISTINTO expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.DISTINTO);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr IGUAL expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.IGUAL);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr OR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.OR);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr AND expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.AND);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= COMPLEMENTO expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBitwise(l,null,TipoOperadorBitwise.COMPLEMENTO);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr SHIFT_DER expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.SHIFT_DER);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr SHIFT_IZQ expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.SHIFT_IZQ);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr BXOR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.XOR);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr BOR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.OR);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr BAND expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.AND);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = e;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr MODULO expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.MODULO);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr DIVISION_ENTERA expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.DIVISION_ENTERA);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr EXPONENTE expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.EXPONENTE);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr MULTIPLICACION expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.MULTIPLICACION);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr DIVISION expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.DIVISION);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= RESTA expr 
            {
              Expr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Valor v = new Valor(0, null, 0,false,0, TipoValor.INT);
				RESULT = new OperacionBinaria(v,r,TipoOperadorBinario.RESTA);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr RESTA expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.RESTA);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr SUMA expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.SUMA);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= ID 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Var(i);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= LONG 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Valor v = new Valor(0, null, 0,false,new Long( l), TipoValor.LONG);
				RESULT = new Const(v);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= BOOLEAN 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Valor v = new Valor(0, null, 0, b, 0, TipoValor.BOOL);
				RESULT = new Const(v);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= STRING 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				String aux = s.substring(1, s.length()-1);
				Valor v = new Valor(0, aux, 0, false, 0, TipoValor.STRING);
				RESULT = new Const(v);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= FLOAT 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Valor v = new Valor(new Float(f), null, 0, false, 0, TipoValor.FLOAT);
				RESULT = new Const(v);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= INT 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Valor v = new Valor(0, null, new Integer(i), false, 0, TipoValor.INT);
				RESULT = new Const(v);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comm ::= ID LPAREN listaExpr RPAREN SEPARADOR 
            {
              Comm RESULT =null;
		int nomFuncleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nomFuncright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String nomFunc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ListaExpr l = (ListaExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
				Var variable = new Var(nomFunc);
				FuncionEjecutar fe = new FuncionEjecutar(variable, l); 
				RESULT = new CommExpr(fe);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // comm ::= FDEF ID LPAREN lvar RPAREN DOSPUNTOS lcomm freturn 
            {
              Comm RESULT =null;
		int nomFuncleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nomFuncright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String nomFunc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ListaVar lv = (ListaVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ListComm l = (ListComm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				Var variable = new Var(nomFunc); 
				RESULT = new FuncionDef(variable,lv,l);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // comm ::= ID DOT ID LPAREN expr COMMA expr RPAREN 
            {
              Comm RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				Var variable = new Var(i1);
				Var nombreFuncion = new Var("i2");
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, nombreFuncion, e1, e2);
				RESULT = new CommExpr(op);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // comm ::= ID DOT ID LPAREN expr RPAREN 
            {
              Comm RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				Var variable = new Var(i1);
				Var nombreFuncion = new Var("i2");
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, nombreFuncion, e, null);
				RESULT = new CommExpr(op);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // comm ::= ID DOT ID LPAREN RPAREN 
            {
              Comm RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
				Var variable = new Var(i1);
				Var nombreFuncion = new Var("i2");
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, nombreFuncion, null, null);
				RESULT = new CommExpr(op);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // comm ::= IF expr DOSPUNTOS lcomm ELSE lcomm ENDIF 
            {
              Comm RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ListComm l1 = (ListComm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ListComm l2 = (ListComm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new IfThenElse(e, l1, l2);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // comm ::= IF expr DOSPUNTOS lcomm ENDIF 
            {
              Comm RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ListComm l = (ListComm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new IfThen(e, l);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // comm ::= WHILE expr DOSPUNTOS lcomm ENDWHILE 
            {
              Comm RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ListComm l = (ListComm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new While(e, l);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // comm ::= PRINT expr 
            {
              Comm RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Print(e);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // comm ::= ID EQUAL ID LPARENCUADRADO INT RPARENCUADRADO 
            {
              Comm RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				Var variable = new Var(i);
				Var lista = new Var(l);
				Var nombreFuncion = new Var("index");
				OperacionesPredefinidas op = new OperacionesPredefinidas(lista, nombreFuncion, v1, v2);
				RESULT = new Asignacion(op,variable);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // comm ::= ID EQUAL exprlista 
            {
              Comm RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr el = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Var v = new Var(i);
				RESULT = new AsignacionLista(v, el);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // comm ::= ID EQUAL expr 
            {
              Comm RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Var v = new Var(i);
				RESULT = new Asignacion(e, v);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lcomm ::= comm SEPARADOR 
            {
              ListComm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Comm c = (Comm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					
					RESULT = new ListComm(c);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lcomm",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lcomm ::= comm SEPARADOR lcomm 
            {
              ListComm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Comm c = (Comm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ListComm l = (ListComm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					
					RESULT = new ListComm(c, l);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lcomm",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // prog ::= lcomm END 
            {
              Programa RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ListComm l = (ListComm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					
					RESULT = new Programa(l);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

