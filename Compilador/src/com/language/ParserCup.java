
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jul 17 12:17:08 UYT 2015
//----------------------------------------------------

package com.language;

import java.util.*;
import java_cup.runtime.*;
import com.language.*;
import com.language.model.expression.*;
import com.language.exceptions.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jul 17 12:17:08 UYT 2015
  */
public class ParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\014\004\000\002\002\004\000\002\012" +
    "\005\000\002\012\004\000\002\013\005\000\002\013\004" +
    "\000\002\013\006\000\002\013\010\000\002\013\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\010\000\002" +
    "\011\010\000\002\011\004\000\002\011\007\000\002\011" +
    "\007\000\002\011\011\000\002\011\007\000\002\011\010" +
    "\000\002\011\012\000\002\011\012\000\002\011\007\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\005\000\002\002\005\000\002\002\004\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\004\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\004\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\007\000\002\002\010\000\002\002" +
    "\012\000\002\003\005\000\002\015\005\000\002\015\003" +
    "\000\002\015\003\000\002\005\005\000\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\014\040\013\047\004\051\010\074\007\076" +
    "\012\001\002\000\026\005\033\015\034\031\032\036\035" +
    "\076\030\077\023\100\036\101\026\102\025\103\024\001" +
    "\002\000\004\035\220\001\002\000\004\002\217\001\002" +
    "\000\004\076\175\001\002\000\026\005\033\015\034\031" +
    "\032\036\035\076\030\077\023\100\036\101\026\102\025" +
    "\103\024\001\002\000\004\033\164\001\002\000\010\032" +
    "\131\034\133\036\132\001\002\000\026\005\033\015\034" +
    "\031\032\036\035\076\030\077\023\100\036\101\026\102" +
    "\025\103\024\001\002\000\004\032\020\001\002\000\004" +
    "\043\016\001\002\000\002\001\002\000\006\032\uffc6\037" +
    "\uffc6\001\002\000\004\076\021\001\002\000\004\036\022" +
    "\001\002\000\026\005\033\015\034\031\032\036\035\076" +
    "\030\077\023\100\036\101\026\102\025\103\024\001\002" +
    "\000\064\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\014\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\033\uffeb\037\uffeb\042\uffeb\043\uffeb\046\uffeb" +
    "\001\002\000\064\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\016\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\030\uffe7\033\uffe7\037\uffe7\042\uffe7\043\uffe7" +
    "\046\uffe7\001\002\000\064\004\uffe8\005\uffe8\006\uffe8\007" +
    "\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025" +
    "\uffe8\026\uffe8\027\uffe8\030\uffe8\033\uffe8\037\uffe8\042\uffe8" +
    "\043\uffe8\046\uffe8\001\002\000\064\004\uffe9\005\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\033\uffe9\037\uffe9" +
    "\042\uffe9\043\uffe9\046\uffe9\001\002\000\004\037\127\001" +
    "\002\000\066\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\014\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\027\uffe6\030\uffe6\033\uffe6\034\116\037\uffe6\042\uffe6\043" +
    "\uffe6\046\uffe6\001\002\000\054\004\050\005\064\006\047" +
    "\007\043\010\062\011\040\012\054\013\053\014\055\016" +
    "\063\017\061\020\060\021\041\022\044\023\057\024\046" +
    "\025\056\026\042\027\051\030\052\043\114\001\002\000" +
    "\026\005\033\015\034\031\032\036\035\076\030\077\023" +
    "\100\036\101\026\102\025\103\024\001\002\000\026\005" +
    "\033\015\034\031\032\036\035\076\030\077\023\100\036" +
    "\101\026\102\025\103\024\001\002\000\026\005\033\015" +
    "\034\031\032\036\035\076\030\077\023\100\036\101\026" +
    "\102\025\103\024\001\002\000\026\005\033\015\034\031" +
    "\032\036\035\076\030\077\023\100\036\101\026\102\025" +
    "\103\024\001\002\000\064\004\uffea\005\uffea\006\uffea\007" +
    "\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\033\uffea\037\uffea\042\uffea" +
    "\043\uffea\046\uffea\001\002\000\054\004\050\005\064\006" +
    "\047\007\043\010\062\011\040\012\054\013\053\014\055" +
    "\016\063\017\061\020\060\021\041\022\044\023\057\024" +
    "\046\025\056\026\042\027\051\030\052\037\045\001\002" +
    "\000\026\005\033\015\034\031\032\036\035\076\030\077" +
    "\023\100\036\101\026\102\025\103\024\001\002\000\026" +
    "\005\033\015\034\031\032\036\035\076\030\077\023\100" +
    "\036\101\026\102\025\103\024\001\002\000\026\005\033" +
    "\015\034\031\032\036\035\076\030\077\023\100\036\101" +
    "\026\102\025\103\024\001\002\000\026\005\033\015\034" +
    "\031\032\036\035\076\030\077\023\100\036\101\026\102" +
    "\025\103\024\001\002\000\026\005\033\015\034\031\032" +
    "\036\035\076\030\077\023\100\036\101\026\102\025\103" +
    "\024\001\002\000\064\004\uffdd\005\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\033\uffdd\037\uffdd\042\uffdd\043" +
    "\uffdd\046\uffdd\001\002\000\026\005\033\015\034\031\032" +
    "\036\035\076\030\077\023\100\036\101\026\102\025\103" +
    "\024\001\002\000\026\005\033\015\034\031\032\036\035" +
    "\076\030\077\023\100\036\101\026\102\025\103\024\001" +
    "\002\000\026\005\033\015\034\031\032\036\035\076\030" +
    "\077\023\100\036\101\026\102\025\103\024\001\002\000" +
    "\026\005\033\015\034\031\032\036\035\076\030\077\023" +
    "\100\036\101\026\102\025\103\024\001\002\000\026\005" +
    "\033\015\034\031\032\036\035\076\030\077\023\100\036" +
    "\101\026\102\025\103\024\001\002\000\026\005\033\015" +
    "\034\031\032\036\035\076\030\077\023\100\036\101\026" +
    "\102\025\103\024\001\002\000\026\005\033\015\034\031" +
    "\032\036\035\076\030\077\023\100\036\101\026\102\025" +
    "\103\024\001\002\000\026\005\033\015\034\031\032\036" +
    "\035\076\030\077\023\100\036\101\026\102\025\103\024" +
    "\001\002\000\026\005\033\015\034\031\032\036\035\076" +
    "\030\077\023\100\036\101\026\102\025\103\024\001\002" +
    "\000\026\005\033\015\034\031\032\036\035\076\030\077" +
    "\023\100\036\101\026\102\025\103\024\001\002\000\026" +
    "\005\033\015\034\031\032\036\035\076\030\077\023\100" +
    "\036\101\026\102\025\103\024\001\002\000\026\005\033" +
    "\015\034\031\032\036\035\076\030\077\023\100\036\101" +
    "\026\102\025\103\024\001\002\000\026\005\033\015\034" +
    "\031\032\036\035\076\030\077\023\100\036\101\026\102" +
    "\025\103\024\001\002\000\026\005\033\015\034\031\032" +
    "\036\035\076\030\077\023\100\036\101\026\102\025\103" +
    "\024\001\002\000\026\005\033\015\034\031\032\036\035" +
    "\076\030\077\023\100\036\101\026\102\025\103\024\001" +
    "\002\000\064\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4" +
    "\011\uffe4\012\uffe4\013\uffe4\014\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\033\uffe4\037\uffe4\042\uffe4\043\uffe4\046" +
    "\uffe4\001\002\000\064\004\050\005\064\006\uffdc\007\uffdc" +
    "\010\062\011\uffdc\012\uffdc\013\uffdc\014\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\041\022\044\023\057\024\046\025\056" +
    "\026\042\027\051\030\052\033\uffdc\037\uffdc\042\uffdc\043" +
    "\uffdc\046\uffdc\001\002\000\064\004\050\005\064\006\uffe0" +
    "\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\030\uffe0\033\uffe0\037\uffe0\042" +
    "\uffe0\043\uffe0\046\uffe0\001\002\000\064\004\050\005\064" +
    "\006\uffdb\007\uffdb\010\062\011\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\021\041\022\044\023\057" +
    "\024\046\025\056\026\042\027\051\030\052\033\uffdb\037" +
    "\uffdb\042\uffdb\043\uffdb\046\uffdb\001\002\000\064\004\050" +
    "\005\064\006\uffda\007\uffda\010\062\011\uffda\012\uffda\013" +
    "\uffda\014\uffda\016\uffda\017\uffda\020\uffda\021\041\022\044" +
    "\023\057\024\046\025\056\026\042\027\051\030\052\033" +
    "\uffda\037\uffda\042\uffda\043\uffda\046\uffda\001\002\000\064" +
    "\004\050\005\064\006\uffd3\007\uffd3\010\062\011\uffd3\012" +
    "\uffd3\013\uffd3\014\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\033\uffd3\037\uffd3\042\uffd3\043\uffd3\046\uffd3\001\002" +
    "\000\064\004\050\005\064\006\uffd0\007\uffd0\010\062\011" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\016\uffd0\017\uffd0\020\uffd0" +
    "\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\033\uffd0\037\uffd0\042\uffd0\043\uffd0\046\uffd0" +
    "\001\002\000\064\004\050\005\064\006\uffd8\007\uffd8\010" +
    "\062\011\uffd8\012\uffd8\013\uffd8\014\uffd8\016\uffd8\017\uffd8" +
    "\020\uffd8\021\041\022\044\023\057\024\046\025\056\026" +
    "\042\027\051\030\052\033\uffd8\037\uffd8\042\uffd8\043\uffd8" +
    "\046\uffd8\001\002\000\064\004\050\005\064\006\uffde\007" +
    "\uffde\010\062\011\uffde\012\uffde\013\uffde\014\uffde\016\uffde" +
    "\017\uffde\020\uffde\021\041\022\044\023\057\024\046\025" +
    "\056\026\042\027\051\030\052\033\uffde\037\uffde\042\uffde" +
    "\043\uffde\046\uffde\001\002\000\064\004\050\005\064\006" +
    "\uffd9\007\uffd9\010\062\011\uffd9\012\uffd9\013\uffd9\014\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\021\041\022\044\023\057\024" +
    "\046\025\056\026\042\027\051\030\052\033\uffd9\037\uffd9" +
    "\042\uffd9\043\uffd9\046\uffd9\001\002\000\064\004\050\005" +
    "\064\006\uffce\007\uffce\010\062\011\uffce\012\uffce\013\uffce" +
    "\014\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\033\uffce" +
    "\037\uffce\042\uffce\043\uffce\046\uffce\001\002\000\064\004" +
    "\050\005\064\006\uffcf\007\uffcf\010\062\011\uffcf\012\uffcf" +
    "\013\uffcf\014\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\033\uffcf\037\uffcf\042\uffcf\043\uffcf\046\uffcf\001\002\000" +
    "\064\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\016\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\033\uffe5\037\uffe5\042\uffe5\043\uffe5\046\uffe5\001" +
    "\002\000\064\004\050\005\064\006\uffe2\007\uffe2\010\062" +
    "\011\uffe2\012\uffe2\013\uffe2\014\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\041\022\044\023\057\024\046\025\056\026\042" +
    "\027\051\030\052\033\uffe2\037\uffe2\042\uffe2\043\uffe2\046" +
    "\uffe2\001\002\000\064\004\050\005\064\006\uffd4\007\uffd4" +
    "\010\062\011\uffd4\012\uffd4\013\uffd4\014\uffd4\016\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\030\uffd4\033\uffd4\037\uffd4\042\uffd4\043" +
    "\uffd4\046\uffd4\001\002\000\064\004\050\005\064\006\uffd5" +
    "\007\uffd5\010\062\011\uffd5\012\uffd5\013\uffd5\014\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\030\uffd5\033\uffd5\037\uffd5\042" +
    "\uffd5\043\uffd5\046\uffd5\001\002\000\064\004\050\005\064" +
    "\006\uffe1\007\uffe1\010\062\011\uffe1\012\uffe1\013\uffe1\014" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\021\041\022\044\023\057" +
    "\024\046\025\056\026\042\027\051\030\052\033\uffe1\037" +
    "\uffe1\042\uffe1\043\uffe1\046\uffe1\001\002\000\064\004\050" +
    "\005\064\006\uffd2\007\uffd2\010\062\011\uffd2\012\uffd2\013" +
    "\uffd2\014\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\033" +
    "\uffd2\037\uffd2\042\uffd2\043\uffd2\046\uffd2\001\002\000\064" +
    "\004\050\005\064\006\uffd6\007\uffd6\010\062\011\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\033\uffd6\037\uffd6\042\uffd6\043\uffd6\046\uffd6\001\002" +
    "\000\064\004\050\005\064\006\uffdf\007\uffdf\010\062\011" +
    "\uffdf\012\uffdf\013\uffdf\014\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\021\041\022\044\023\057\024\046\025\056\026\042\027" +
    "\051\030\052\033\uffdf\037\uffdf\042\uffdf\043\uffdf\046\uffdf" +
    "\001\002\000\064\004\050\005\064\006\uffd7\007\uffd7\010" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\033\uffd7\037\uffd7\042\uffd7\043\uffd7" +
    "\046\uffd7\001\002\000\064\004\uffe3\005\uffe3\006\uffe3\007" +
    "\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\033\uffe3\037\uffe3\042\uffe3" +
    "\043\uffe3\046\uffe3\001\002\000\064\004\050\005\064\006" +
    "\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1" +
    "\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\033\uffd1\037\uffd1" +
    "\042\uffd1\043\uffd1\046\uffd1\001\002\000\026\005\033\015" +
    "\034\031\032\036\035\076\030\077\023\100\036\101\026" +
    "\102\025\103\024\001\002\000\006\033\uffc5\037\uffc5\001" +
    "\002\000\004\076\117\001\002\000\004\036\120\001\002" +
    "\000\030\005\033\015\034\031\032\036\035\037\121\076" +
    "\030\077\023\100\036\101\026\102\025\103\024\001\002" +
    "\000\064\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011" +
    "\uffcd\012\uffcd\013\uffcd\014\uffcd\016\uffcd\017\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\033\uffcd\037\uffcd\042\uffcd\043\uffcd\046\uffcd" +
    "\001\002\000\056\004\050\005\064\006\047\007\043\010" +
    "\062\011\040\012\054\013\053\014\055\016\063\017\061" +
    "\020\060\021\041\022\044\023\057\024\046\025\056\026" +
    "\042\027\051\030\052\037\123\043\124\001\002\000\064" +
    "\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\033\uffcc\037\uffcc\042\uffcc\043\uffcc\046\uffcc\001\002" +
    "\000\026\005\033\015\034\031\032\036\035\076\030\077" +
    "\023\100\036\101\026\102\025\103\024\001\002\000\054" +
    "\004\050\005\064\006\047\007\043\010\062\011\040\012" +
    "\054\013\053\014\055\016\063\017\061\020\060\021\041" +
    "\022\044\023\057\024\046\025\056\026\042\027\051\030" +
    "\052\037\126\001\002\000\064\004\uffcb\005\uffcb\006\uffcb" +
    "\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\016" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\030\uffcb\033\uffcb\037\uffcb\042" +
    "\uffcb\043\uffcb\046\uffcb\001\002\000\004\033\ufff5\001\002" +
    "\000\054\004\050\005\064\006\047\007\043\010\062\011" +
    "\040\012\054\013\053\014\055\016\063\017\061\020\060" +
    "\021\041\022\044\023\057\024\046\025\056\026\042\027" +
    "\051\030\052\033\ufff4\001\002\000\030\005\033\015\034" +
    "\031\032\036\035\041\152\076\150\077\023\100\036\101" +
    "\026\102\025\103\024\001\002\000\026\005\033\015\034" +
    "\031\032\036\035\076\030\077\023\100\036\101\026\102" +
    "\025\103\024\001\002\000\004\076\134\001\002\000\004" +
    "\036\135\001\002\000\030\005\033\015\034\031\032\036" +
    "\035\037\136\076\030\077\023\100\036\101\026\102\025" +
    "\103\024\001\002\000\004\033\ufff0\001\002\000\056\004" +
    "\050\005\064\006\047\007\043\010\062\011\040\012\054" +
    "\013\053\014\055\016\063\017\061\020\060\021\041\022" +
    "\044\023\057\024\046\025\056\026\042\027\051\030\052" +
    "\037\140\043\141\001\002\000\004\033\uffef\001\002\000" +
    "\026\005\033\015\034\031\032\036\035\076\030\077\023" +
    "\100\036\101\026\102\025\103\024\001\002\000\054\004" +
    "\050\005\064\006\047\007\043\010\062\011\040\012\054" +
    "\013\053\014\055\016\063\017\061\020\060\021\041\022" +
    "\044\023\057\024\046\025\056\026\042\027\051\030\052" +
    "\037\143\001\002\000\004\033\uffee\001\002\000\004\037" +
    "\145\001\002\000\004\033\146\001\002\000\004\033\uffec" +
    "\001\002\000\004\033\ufff7\001\002\000\060\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\033\uffe6" +
    "\034\116\041\161\001\002\000\054\004\050\005\064\006" +
    "\047\007\043\010\062\011\040\012\054\013\053\014\055" +
    "\016\063\017\061\020\060\021\041\022\044\023\057\024" +
    "\046\025\056\026\042\027\051\030\052\033\ufff8\001\002" +
    "\000\030\005\033\015\034\031\032\036\035\041\152\076" +
    "\030\077\023\100\036\101\026\102\025\103\024\001\002" +
    "\000\004\042\uffc8\001\002\000\004\042\160\001\002\000" +
    "\056\004\050\005\064\006\047\007\043\010\062\011\040" +
    "\012\054\013\053\014\055\016\063\017\061\020\060\021" +
    "\041\022\044\023\057\024\046\025\056\026\042\027\051" +
    "\030\052\042\uffc7\043\156\001\002\000\030\005\033\015" +
    "\034\031\032\036\035\041\152\076\030\077\023\100\036" +
    "\101\026\102\025\103\024\001\002\000\004\042\uffc9\001" +
    "\002\000\006\033\uffca\042\uffca\001\002\000\004\077\162" +
    "\001\002\000\004\042\163\001\002\000\004\033\ufff6\001" +
    "\002\000\024\035\ufffe\040\013\047\004\050\ufffe\051\010" +
    "\052\ufffe\053\ufffe\074\007\076\012\001\002\000\012\035" +
    "\uffff\050\uffff\052\uffff\053\uffff\001\002\000\054\004\050" +
    "\005\064\006\047\007\043\010\062\011\040\012\054\013" +
    "\053\014\055\016\063\017\061\020\060\021\041\022\044" +
    "\023\057\024\046\025\056\026\042\027\051\030\052\046" +
    "\167\001\002\000\014\040\013\047\004\051\010\074\007" +
    "\076\012\001\002\000\006\052\171\053\172\001\002\000" +
    "\014\040\013\047\004\051\010\074\007\076\012\001\002" +
    "\000\004\033\ufff2\001\002\000\004\053\174\001\002\000" +
    "\004\033\ufff1\001\002\000\004\036\176\001\002\000\002" +
    "\001\002\000\004\037\200\001\002\000\004\046\201\001" +
    "\002\000\016\040\013\047\004\051\010\074\007\075\204" +
    "\076\012\001\002\000\004\033\215\001\002\000\004\033" +
    "\207\001\002\000\026\005\033\015\034\031\032\036\035" +
    "\076\030\077\023\100\036\101\026\102\025\103\024\001" +
    "\002\000\004\033\206\001\002\000\004\033\ufff9\001\002" +
    "\000\006\033\uffed\075\210\001\002\000\026\005\033\015" +
    "\034\031\032\036\035\076\030\077\023\100\036\101\026" +
    "\102\025\103\024\001\002\000\004\033\ufffb\001\002\000" +
    "\016\040\013\047\004\051\010\074\007\075\204\076\012" +
    "\001\002\000\004\033\ufffa\001\002\000\004\075\210\001" +
    "\002\000\020\033\ufffc\040\013\047\004\051\010\074\007" +
    "\075\204\076\012\001\002\000\004\033\ufffd\001\002\000" +
    "\004\002\000\001\002\000\004\002\001\001\002\000\054" +
    "\004\050\005\064\006\047\007\043\010\062\011\040\012" +
    "\054\013\053\014\055\016\063\017\061\020\060\021\041" +
    "\022\044\023\057\024\046\025\056\026\042\027\051\030" +
    "\052\046\222\001\002\000\014\040\013\047\004\051\010" +
    "\074\007\076\012\001\002\000\004\050\224\001\002\000" +
    "\004\033\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\014\005\013\006\014\011\010\012\004\014" +
    "\005\001\001\000\004\002\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\016\006\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\030\010\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\112\001\001\000\004\002\111\001\001" +
    "\000\004\002\110\001\001\000\004\002\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\107\001\001" +
    "\000\004\002\106\001\001\000\004\002\105\001\001\000" +
    "\004\002\104\001\001\000\004\002\103\001\001\000\002" +
    "\001\001\000\004\002\102\001\001\000\004\002\101\001" +
    "\001\000\004\002\100\001\001\000\004\002\077\001\001" +
    "\000\004\002\076\001\001\000\004\002\075\001\001\000" +
    "\004\002\074\001\001\000\004\002\073\001\001\000\004" +
    "\002\072\001\001\000\004\002\071\001\001\000\004\002" +
    "\070\001\001\000\004\002\067\001\001\000\004\002\066" +
    "\001\001\000\004\002\065\001\001\000\004\002\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\030\010\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\150\003\146\001\001\000\006\002\030\010\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\154\003\152\015\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\154\003" +
    "\152\015\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\013\006\014\011\010\012\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\013\006\014\011" +
    "\010\012\167\001\001\000\002\001\001\000\012\005\013" +
    "\006\014\011\010\012\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\176\006\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\013\006\014\011\201\013\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\030\010" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\030\010\210\001\001\000\002\001" +
    "\001\000\012\005\013\006\014\011\201\013\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\013\006" +
    "\014\011\201\013\215\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\013\006\014\011\010\012\222\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // listaExpr ::= expr COMMA listaExpr 
            {
              ListaExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ListaExpr le = (ListaExpr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new ListaExpr(e,le);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listaExpr",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lvar ::= var COMMA lvar 
            {
              ListaVar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ListaVar lv = (ListaVar)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new ListaVar(v,lv);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lvar",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // elista ::= expr 
            {
              TEstructuradoLista RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new TEstructuradoLista(e);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("elista",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // elista ::= exprlista 
            {
              TEstructuradoLista RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new TEstructuradoLista(e);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("elista",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // elista ::= expr COMMA elista 
            {
              TEstructuradoLista RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		TEstructuradoLista el = (TEstructuradoLista)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new TEstructuradoLista(e, el);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("elista",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exprlista ::= LPARENCUADRADO elista RPARENCUADRADO 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		TEstructuradoLista e = (TEstructuradoLista)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
				RESULT = new TEstructuradoLista(e);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exprlista",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= ID DOT ID LPAREN expr COMMA expr RPAREN 
            {
              Expr RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
				Var variable = new Var(i1);
				Var nombreFuncion = new Var("i2");
				RESULT = new OperacionesPredefinidas(variable, nombreFuncion, e1, e2);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= ID DOT ID LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
				Var variable = new Var(i1);
				Var nombreFuncion = new Var("i2");
				RESULT = new OperacionesPredefinidas(variable, nombreFuncion, e, null);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= ID DOT ID LPAREN RPAREN 
            {
              Expr RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
				Var variable = new Var(i1);
				Var nombreFuncion = new Var("i2");
				RESULT = new OperacionesPredefinidas(variable, nombreFuncion, null, null);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr MAYOR_IGUAL expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.MAYOR_IGUAL);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr MENOR_IGUAL expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.MENOR_IGUAL);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr MAYOR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.MAYOR);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= NOT expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,null,TipoOperadorBooleano.NOT);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr MENOR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.MENOR);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr DISTINTO expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.DISTINTO);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr IGUAL expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.IGUAL);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr OR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.OR);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr AND expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.AND);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= COMPLEMENTO expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new OperacionBitwise(l,null,TipoOperadorBitwise.COMPLEMENTO);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr SHIFT_DER expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.SHIFT_DER);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr SHIFT_IZQ expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.SHIFT_IZQ);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr BXOR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.XOR);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr BOR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.OR);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr BAND expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.AND);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
				RESULT = e;
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr MODULO expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.MODULO);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr DIVISION_ENTERA expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.DIVISION_ENTERA);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr EXPONENTE expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.EXPONENTE);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr MULTIPLICACION expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.MULTIPLICACION);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr DIVISION expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.DIVISION);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= RESTA expr 
            {
              Expr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				Valor v = new Valor(0, null, 0,false,0, TipoValor.INT);
				RESULT = new OperacionBinaria(v,r,TipoOperadorBinario.RESTA);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr RESTA expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.RESTA);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr SUMA expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.SUMA);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= ID 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new Var(i);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= LONG 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				Valor v = new Valor(0, null, 0,false,new Long( l), TipoValor.LONG);
				RESULT = new Const(v);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= BOOLEAN 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				Valor v = new Valor(0, null, 0, b, 0, TipoValor.BOOL);
				RESULT = new Const(v);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= STRING 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				String aux = s.substring(1, s.length()-1);
				Valor v = new Valor(0, aux, 0, false, 0, TipoValor.STRING);
				RESULT = new Const(v);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= FLOAT 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				Valor v = new Valor(new Float(f), null, 0, false, 0, TipoValor.FLOAT);
				RESULT = new Const(v);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= INT 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				Valor v = new Valor(0, null, new Integer(i), false, 0, TipoValor.INT);
				RESULT = new Const(v);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // comm ::= ID LPAREN listaExpr RPAREN SEPARADOR 
            {
              Comm RESULT =null;
		int nomFuncleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int nomFuncright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String nomFunc = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ListaExpr l = (ListaExpr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
				Var variable = new Var(nomFunc);
				FuncionEjecutar fe = new FuncionEjecutar(variable, l); 
				RESULT = new CommExpr(fe);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("comm",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // comm ::= FDEF ID LPAREN lvar RPAREN DOSPUNTOS lcommFunc SEPARADOR 
            {
              Comm RESULT =null;
		int nomFuncleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int nomFuncright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String nomFunc = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		ListaVar lv = (ListaVar)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ListComm l = (ListComm)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
				Var variable = new Var(nomFunc); 
				RESULT = new FuncionDef(variable,lv,l);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("comm",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // comm ::= ID DOT ID LPAREN expr COMMA expr RPAREN 
            {
              Comm RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
				Var variable = new Var(i1);
				Var nombreFuncion = new Var("i2");
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, nombreFuncion, e1, e2);
				RESULT = new CommExpr(op);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("comm",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // comm ::= ID DOT ID LPAREN expr RPAREN 
            {
              Comm RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
				Var variable = new Var(i1);
				Var nombreFuncion = new Var("i2");
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, nombreFuncion, e, null);
				RESULT = new CommExpr(op);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("comm",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // comm ::= ID DOT ID LPAREN RPAREN 
            {
              Comm RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
				Var variable = new Var(i1);
				Var nombreFuncion = new Var("i2");
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, nombreFuncion, null, null);
				RESULT = new CommExpr(op);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("comm",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comm ::= IF expr DOSPUNTOS lcomm ELSE lcomm ENDIF 
            {
              Comm RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		ListComm l1 = (ListComm)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ListComm l2 = (ListComm)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
				RESULT = new IfThenElse(e, l1, l2);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("comm",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comm ::= IF expr DOSPUNTOS lcomm ENDIF 
            {
              Comm RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ListComm l = (ListComm)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
				RESULT = new IfThen(e, l);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("comm",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // comm ::= WHILE expr DOSPUNTOS lcomm ENDWHILE 
            {
              Comm RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ListComm l = (ListComm)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
				RESULT = new While(e, l);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("comm",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // comm ::= PRINT expr 
            {
              Comm RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				RESULT = new Print(e);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("comm",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // comm ::= lvar EQUAL ID LPAREN listaExpr RPAREN 
            {
              Comm RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		ListaVar lv = (ListaVar)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int nomFuncleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int nomFuncright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String nomFunc = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ListaExpr parametros = (ListaExpr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
				Var funcion = new Var(nomFunc);
				FuncionEjecutar fe = new FuncionEjecutar(nombreFunc, parametros); 
				RESULT = new AsignacionFuncion(lv,fe);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("comm",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // comm ::= ID EQUAL ID LPARENCUADRADO INT RPARENCUADRADO 
            {
              Comm RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
				Var variable = new Var(i);
				Var lista = new Var(l);
				Var nombreFuncion = new Var("index");
				Valor v = new Valor(0,null, new Integer(param), false, 0,TipoValor.INT);
				OperacionesPredefinidas op = new OperacionesPredefinidas(lista, nombreFuncion, v, null);
				RESULT = new Asignacion(op,variable);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("comm",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // comm ::= ID EQUAL exprlista 
            {
              Comm RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr el = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				Var v = new Var(i);
				RESULT = new AsignacionLista(v, el);
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("comm",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // comm ::= ID EQUAL expr 
            {
              Comm RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				Var v = new Var(i);
				RESULT = new Asignacion(e, v); 
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("comm",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lcommFunc ::= FRETURN listaExpr SEPARADOR 
            {
              ListComm RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ListaExpr l = (ListaExpr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
					
					RESULT = new ListComm(new FuncionReturn(l));
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lcommFunc",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lcommFunc ::= lcommFunc SEPARADOR FRETURN listaExpr SEPARADOR lcommFunc 
            {
              ListComm RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		ListComm lc = (ListComm)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		ListaExpr l = (ListaExpr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int otrolcleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int otrolcright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ListComm otrolc = (ListComm)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
					FuncionReturn fret = new FuncionReturn(l);
					ListComm sig = lc;
					ListComm elRet = new ListComm(fret);
					elRet.setSiguiente(otrolc);
					while(sig.getSiguiente() != null){
						sig=sig.getSiguiente();
					}
					sig.setSiguiente(elRet);
					RESULT = lc;
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lcommFunc",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lcommFunc ::= lcommFunc SEPARADOR FRETURN listaExpr 
            {
              ListComm RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		ListComm lc = (ListComm)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ListaExpr l = (ListaExpr)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
					FuncionReturn fret = new FuncionReturn(l);
					ListComm sig = lc;
					while(sig.getSiguiente() != null){
						sig=sig.getSiguiente();
					}
					sig.setSiguiente(new ListComm(fret));
					RESULT = lc;
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lcommFunc",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lcommFunc ::= comm SEPARADOR 
            {
              ListComm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Comm c = (Comm)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
					
					RESULT = new ListComm(c);
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lcommFunc",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lcommFunc ::= comm SEPARADOR lcommFunc 
            {
              ListComm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Comm c = (Comm)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ListComm l = (ListComm)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
					
					RESULT = new ListComm(c, l);
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lcommFunc",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lcomm ::= comm SEPARADOR 
            {
              ListComm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Comm c = (Comm)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
					
					RESULT = new ListComm(c);
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lcomm",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lcomm ::= comm SEPARADOR lcomm 
            {
              ListComm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Comm c = (Comm)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ListComm l = (ListComm)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
					
					RESULT = new ListComm(c, l);
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lcomm",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // prog ::= lcomm END 
            {
              Programa RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		ListComm l = (ListComm)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
					
					RESULT = new Programa(l);
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("prog",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

