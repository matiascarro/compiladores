
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jul 17 17:18:36 UYT 2015
//----------------------------------------------------

package com.language;

import java.util.*;
import java_cup.runtime.*;
import com.language.*;
import com.language.model.expression.*;
import com.language.exceptions.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jul 17 17:18:36 UYT 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\012\004\000\002\002\004\000\002\010" +
    "\005\000\002\010\004\000\002\011\005\000\002\011\004" +
    "\000\002\011\006\000\002\011\010\000\002\011\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\010\000\002\007\004\000\002\007\007\000\002\007" +
    "\007\000\002\007\011\000\002\007\007\000\002\007\010" +
    "\000\002\007\012\000\002\007\011\000\002\007\012\000" +
    "\002\007\014\000\002\007\010\000\002\007\011\000\002" +
    "\007\013\000\002\007\007\000\002\007\010\000\002\007" +
    "\012\000\002\007\014\000\002\007\011\000\002\007\006" +
    "\000\002\007\005\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\005\000\002\002\005\000\002\002" +
    "\004\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\004\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\003\005\000\002" +
    "\003\007\000\002\013\005\000\002\013\003\000\002\014" +
    "\007\000\002\014\011\000\002\006\005\000\002\006\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\014\040\013\047\004\051\010\054\007\056" +
    "\012\001\002\000\026\005\030\015\032\031\026\036\031" +
    "\056\025\057\020\060\033\061\023\062\022\063\021\001" +
    "\002\000\004\035\257\001\002\000\004\002\256\001\002" +
    "\000\004\056\222\001\002\000\026\005\030\015\032\031" +
    "\026\036\031\056\025\057\020\060\033\061\023\062\022" +
    "\063\021\001\002\000\004\033\211\001\002\000\010\032" +
    "\132\034\134\036\133\001\002\000\026\005\030\015\032" +
    "\031\026\036\031\056\114\057\020\060\033\061\023\062" +
    "\022\063\021\001\002\000\004\032\015\001\002\000\004" +
    "\056\016\001\002\000\004\036\017\001\002\000\026\005" +
    "\030\015\032\031\026\036\031\056\025\057\020\060\033" +
    "\061\023\062\022\063\021\001\002\000\070\004\uffe0\005" +
    "\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0" +
    "\014\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\033\uffe0" +
    "\035\uffe0\037\uffe0\042\uffe0\043\uffe0\045\uffe0\046\uffe0\001" +
    "\002\000\070\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc" +
    "\011\uffdc\012\uffdc\013\uffdc\014\uffdc\016\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\033\uffdc\035\uffdc\037\uffdc\042\uffdc\043" +
    "\uffdc\045\uffdc\046\uffdc\001\002\000\070\004\uffdd\005\uffdd" +
    "\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\033\uffdd\035" +
    "\uffdd\037\uffdd\042\uffdd\043\uffdd\045\uffdd\046\uffdd\001\002" +
    "\000\070\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011" +
    "\uffde\012\uffde\013\uffde\014\uffde\016\uffde\017\uffde\020\uffde" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\033\uffde\035\uffde\037\uffde\042\uffde\043\uffde" +
    "\045\uffde\046\uffde\001\002\000\004\037\113\001\002\000" +
    "\070\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb" +
    "\012\uffdb\013\uffdb\014\uffdb\016\uffdb\017\uffdb\020\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\033\uffdb\035\uffdb\037\uffdb\042\uffdb\043\uffdb\045" +
    "\uffdb\046\uffdb\001\002\000\026\005\030\015\032\031\026" +
    "\036\031\056\025\057\020\060\033\061\023\062\022\063" +
    "\021\001\002\000\062\004\044\005\060\006\043\007\037" +
    "\010\056\011\035\012\050\013\047\014\051\016\057\017" +
    "\055\020\054\021\036\022\041\023\052\024\042\025\053" +
    "\026\040\027\045\030\046\033\uffbb\035\uffbb\037\uffbb\043" +
    "\110\001\002\000\026\005\030\015\032\031\026\036\031" +
    "\056\025\057\020\060\033\061\023\062\022\063\021\001" +
    "\002\000\026\005\030\015\032\031\026\036\031\056\025" +
    "\057\020\060\033\061\023\062\022\063\021\001\002\000" +
    "\026\005\030\015\032\031\026\036\031\056\025\057\020" +
    "\060\033\061\023\062\022\063\021\001\002\000\070\004" +
    "\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\033\uffdf\035\uffdf\037\uffdf\042\uffdf\043\uffdf\045\uffdf\046" +
    "\uffdf\001\002\000\070\004\044\005\060\006\uffcc\007\uffcc" +
    "\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\016\uffcc\017" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc" +
    "\026\uffcc\027\uffcc\030\uffcc\033\uffcc\035\uffcc\037\uffcc\042" +
    "\uffcc\043\uffcc\045\uffcc\046\uffcc\001\002\000\026\005\030" +
    "\015\032\031\026\036\031\056\025\057\020\060\033\061" +
    "\023\062\022\063\021\001\002\000\026\005\030\015\032" +
    "\031\026\036\031\056\025\057\020\060\033\061\023\062" +
    "\022\063\021\001\002\000\026\005\030\015\032\031\026" +
    "\036\031\056\025\057\020\060\033\061\023\062\022\063" +
    "\021\001\002\000\026\005\030\015\032\031\026\036\031" +
    "\056\025\057\020\060\033\061\023\062\022\063\021\001" +
    "\002\000\026\005\030\015\032\031\026\036\031\056\025" +
    "\057\020\060\033\061\023\062\022\063\021\001\002\000" +
    "\026\005\030\015\032\031\026\036\031\056\025\057\020" +
    "\060\033\061\023\062\022\063\021\001\002\000\026\005" +
    "\030\015\032\031\026\036\031\056\025\057\020\060\033" +
    "\061\023\062\022\063\021\001\002\000\026\005\030\015" +
    "\032\031\026\036\031\056\025\057\020\060\033\061\023" +
    "\062\022\063\021\001\002\000\026\005\030\015\032\031" +
    "\026\036\031\056\025\057\020\060\033\061\023\062\022" +
    "\063\021\001\002\000\026\005\030\015\032\031\026\036" +
    "\031\056\025\057\020\060\033\061\023\062\022\063\021" +
    "\001\002\000\026\005\030\015\032\031\026\036\031\056" +
    "\025\057\020\060\033\061\023\062\022\063\021\001\002" +
    "\000\026\005\030\015\032\031\026\036\031\056\025\057" +
    "\020\060\033\061\023\062\022\063\021\001\002\000\026" +
    "\005\030\015\032\031\026\036\031\056\025\057\020\060" +
    "\033\061\023\062\022\063\021\001\002\000\026\005\030" +
    "\015\032\031\026\036\031\056\025\057\020\060\033\061" +
    "\023\062\022\063\021\001\002\000\026\005\030\015\032" +
    "\031\026\036\031\056\025\057\020\060\033\061\023\062" +
    "\022\063\021\001\002\000\026\005\030\015\032\031\026" +
    "\036\031\056\025\057\020\060\033\061\023\062\022\063" +
    "\021\001\002\000\026\005\030\015\032\031\026\036\031" +
    "\056\025\057\020\060\033\061\023\062\022\063\021\001" +
    "\002\000\026\005\030\015\032\031\026\036\031\056\025" +
    "\057\020\060\033\061\023\062\022\063\021\001\002\000" +
    "\026\005\030\015\032\031\026\036\031\056\025\057\020" +
    "\060\033\061\023\062\022\063\021\001\002\000\026\005" +
    "\030\015\032\031\026\036\031\056\025\057\020\060\033" +
    "\061\023\062\022\063\021\001\002\000\070\004\uffd9\005" +
    "\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\033\uffd9" +
    "\035\uffd9\037\uffd9\042\uffd9\043\uffd9\045\uffd9\046\uffd9\001" +
    "\002\000\070\004\044\005\060\006\uffd1\007\uffd1\010\056" +
    "\011\uffd1\012\uffd1\013\uffd1\014\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\021\036\022\041\023\052\024\042\025\053\026\040" +
    "\027\045\030\046\033\uffd1\035\uffd1\037\uffd1\042\uffd1\043" +
    "\uffd1\045\uffd1\046\uffd1\001\002\000\070\004\044\005\060" +
    "\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\033\uffd5\035" +
    "\uffd5\037\uffd5\042\uffd5\043\uffd5\045\uffd5\046\uffd5\001\002" +
    "\000\070\004\044\005\060\006\uffd0\007\uffd0\010\056\011" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\016\uffd0\017\uffd0\020\uffd0" +
    "\021\036\022\041\023\052\024\042\025\053\026\040\027" +
    "\045\030\046\033\uffd0\035\uffd0\037\uffd0\042\uffd0\043\uffd0" +
    "\045\uffd0\046\uffd0\001\002\000\070\004\044\005\060\006" +
    "\uffcf\007\uffcf\010\056\011\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\016\uffcf\017\uffcf\020\uffcf\021\036\022\041\023\052\024" +
    "\042\025\053\026\040\027\045\030\046\033\uffcf\035\uffcf" +
    "\037\uffcf\042\uffcf\043\uffcf\045\uffcf\046\uffcf\001\002\000" +
    "\070\004\044\005\060\006\uffc5\007\uffc5\010\056\011\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\016\uffc5\017\uffc5\020\uffc5\021" +
    "\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\030\uffc5\033\uffc5\035\uffc5\037\uffc5\042\uffc5\043\uffc5\045" +
    "\uffc5\046\uffc5\001\002\000\070\004\044\005\060\006\uffc8" +
    "\007\uffc8\010\056\011\uffc8\012\uffc8\013\uffc8\014\uffc8\016" +
    "\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8" +
    "\025\uffc8\026\uffc8\027\uffc8\030\uffc8\033\uffc8\035\uffc8\037" +
    "\uffc8\042\uffc8\043\uffc8\045\uffc8\046\uffc8\001\002\000\070" +
    "\004\044\005\060\006\uffcd\007\uffcd\010\056\011\uffcd\012" +
    "\uffcd\013\uffcd\014\uffcd\016\uffcd\017\uffcd\020\uffcd\021\036" +
    "\022\041\023\052\024\042\025\053\026\040\027\045\030" +
    "\046\033\uffcd\035\uffcd\037\uffcd\042\uffcd\043\uffcd\045\uffcd" +
    "\046\uffcd\001\002\000\070\004\044\005\060\006\uffd3\007" +
    "\uffd3\010\056\011\uffd3\012\uffd3\013\uffd3\014\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\021\036\022\041\023\052\024\042\025" +
    "\053\026\040\027\045\030\046\033\uffd3\035\uffd3\037\uffd3" +
    "\042\uffd3\043\uffd3\045\uffd3\046\uffd3\001\002\000\070\004" +
    "\044\005\060\006\uffce\007\uffce\010\056\011\uffce\012\uffce" +
    "\013\uffce\014\uffce\016\uffce\017\uffce\020\uffce\021\036\022" +
    "\041\023\052\024\042\025\053\026\040\027\045\030\046" +
    "\033\uffce\035\uffce\037\uffce\042\uffce\043\uffce\045\uffce\046" +
    "\uffce\001\002\000\070\004\044\005\060\006\uffc3\007\uffc3" +
    "\010\056\011\uffc3\012\uffc3\013\uffc3\014\uffc3\016\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\026\uffc3\027\uffc3\030\uffc3\033\uffc3\035\uffc3\037\uffc3\042" +
    "\uffc3\043\uffc3\045\uffc3\046\uffc3\001\002\000\070\004\044" +
    "\005\060\006\uffc4\007\uffc4\010\056\011\uffc4\012\uffc4\013" +
    "\uffc4\014\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\033" +
    "\uffc4\035\uffc4\037\uffc4\042\uffc4\043\uffc4\045\uffc4\046\uffc4" +
    "\001\002\000\070\004\uffda\005\uffda\006\uffda\007\uffda\010" +
    "\uffda\011\uffda\012\uffda\013\uffda\014\uffda\016\uffda\017\uffda" +
    "\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\030\uffda\033\uffda\035\uffda\037\uffda\042\uffda" +
    "\043\uffda\045\uffda\046\uffda\001\002\000\070\004\044\005" +
    "\060\006\uffd7\007\uffd7\010\056\011\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\016\uffd7\017\uffd7\020\uffd7\021\036\022\041\023" +
    "\052\024\042\025\053\026\040\027\045\030\046\033\uffd7" +
    "\035\uffd7\037\uffd7\042\uffd7\043\uffd7\045\uffd7\046\uffd7\001" +
    "\002\000\070\004\044\005\060\006\uffc9\007\uffc9\010\056" +
    "\011\uffc9\012\uffc9\013\uffc9\014\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\033\uffc9\035\uffc9\037\uffc9\042\uffc9\043" +
    "\uffc9\045\uffc9\046\uffc9\001\002\000\070\004\044\005\060" +
    "\006\uffca\007\uffca\010\056\011\uffca\012\uffca\013\uffca\014" +
    "\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\033\uffca\035" +
    "\uffca\037\uffca\042\uffca\043\uffca\045\uffca\046\uffca\001\002" +
    "\000\070\004\044\005\060\006\uffc7\007\uffc7\010\056\011" +
    "\uffc7\012\uffc7\013\uffc7\014\uffc7\016\uffc7\017\uffc7\020\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027" +
    "\uffc7\030\uffc7\033\uffc7\035\uffc7\037\uffc7\042\uffc7\043\uffc7" +
    "\045\uffc7\046\uffc7\001\002\000\070\004\044\005\060\006" +
    "\uffd6\007\uffd6\010\056\011\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\021\036\022\041\023\052\024" +
    "\042\025\053\026\040\027\045\030\046\033\uffd6\035\uffd6" +
    "\037\uffd6\042\uffd6\043\uffd6\045\uffd6\046\uffd6\001\002\000" +
    "\070\004\044\005\060\006\uffcb\007\uffcb\010\056\011\uffcb" +
    "\012\uffcb\013\uffcb\014\uffcb\016\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\033\uffcb\035\uffcb\037\uffcb\042\uffcb\043\uffcb\045" +
    "\uffcb\046\uffcb\001\002\000\070\004\044\005\060\006\uffd4" +
    "\007\uffd4\010\056\011\uffd4\012\uffd4\013\uffd4\014\uffd4\016" +
    "\uffd4\017\uffd4\020\uffd4\021\036\022\041\023\052\024\042" +
    "\025\053\026\040\027\045\030\046\033\uffd4\035\uffd4\037" +
    "\uffd4\042\uffd4\043\uffd4\045\uffd4\046\uffd4\001\002\000\054" +
    "\004\044\005\060\006\043\007\037\010\056\011\035\012" +
    "\050\013\047\014\051\016\057\017\055\020\054\021\036" +
    "\022\041\023\052\024\042\025\053\026\040\027\045\030" +
    "\046\037\106\001\002\000\070\004\uffd2\005\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\016" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2" +
    "\025\uffd2\026\uffd2\027\uffd2\030\uffd2\033\uffd2\035\uffd2\037" +
    "\uffd2\042\uffd2\043\uffd2\045\uffd2\046\uffd2\001\002\000\070" +
    "\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012" +
    "\uffd8\013\uffd8\014\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\033\uffd8\035\uffd8\037\uffd8\042\uffd8\043\uffd8\045\uffd8" +
    "\046\uffd8\001\002\000\026\005\030\015\032\031\026\036" +
    "\031\056\025\057\020\060\033\061\023\062\022\063\021" +
    "\001\002\000\010\033\uffbc\035\uffbc\037\uffbc\001\002\000" +
    "\070\004\044\005\060\006\uffc6\007\uffc6\010\uffc6\011\uffc6" +
    "\012\uffc6\013\uffc6\014\uffc6\016\uffc6\017\uffc6\020\uffc6\021" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6" +
    "\030\uffc6\033\uffc6\035\uffc6\037\uffc6\042\uffc6\043\uffc6\045" +
    "\uffc6\046\uffc6\001\002\000\004\033\ufff5\001\002\000\060" +
    "\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\033\uffdb\034\117\041\116\001\002\000\054\004\044" +
    "\005\060\006\043\007\037\010\056\011\035\012\050\013" +
    "\047\014\051\016\057\017\055\020\054\021\036\022\041" +
    "\023\052\024\042\025\053\026\040\027\045\030\046\033" +
    "\ufff4\001\002\000\004\057\130\001\002\000\004\056\120" +
    "\001\002\000\004\036\121\001\002\000\030\005\030\015" +
    "\032\031\026\036\031\037\122\056\025\057\020\060\033" +
    "\061\023\062\022\063\021\001\002\000\004\033\uffea\001" +
    "\002\000\056\004\044\005\060\006\043\007\037\010\056" +
    "\011\035\012\050\013\047\014\051\016\057\017\055\020" +
    "\054\021\036\022\041\023\052\024\042\025\053\026\040" +
    "\027\045\030\046\037\124\043\125\001\002\000\004\033" +
    "\uffe9\001\002\000\026\005\030\015\032\031\026\036\031" +
    "\056\025\057\020\060\033\061\023\062\022\063\021\001" +
    "\002\000\054\004\044\005\060\006\043\007\037\010\056" +
    "\011\035\012\050\013\047\014\051\016\057\017\055\020" +
    "\054\021\036\022\041\023\052\024\042\025\053\026\040" +
    "\027\045\030\046\037\127\001\002\000\004\033\uffe8\001" +
    "\002\000\004\042\131\001\002\000\004\033\uffe7\001\002" +
    "\000\032\005\030\015\032\031\026\036\031\041\155\044" +
    "\150\056\153\057\020\060\033\061\023\062\022\063\021" +
    "\001\002\000\030\005\030\015\032\031\026\036\031\037" +
    "\146\056\025\057\020\060\033\061\023\062\022\063\021" +
    "\001\002\000\004\056\135\001\002\000\004\036\136\001" +
    "\002\000\030\005\030\015\032\031\026\036\031\037\137" +
    "\056\025\057\020\060\033\061\023\062\022\063\021\001" +
    "\002\000\004\033\ufff0\001\002\000\056\004\044\005\060" +
    "\006\043\007\037\010\056\011\035\012\050\013\047\014" +
    "\051\016\057\017\055\020\054\021\036\022\041\023\052" +
    "\024\042\025\053\026\040\027\045\030\046\037\141\043" +
    "\142\001\002\000\004\033\uffef\001\002\000\026\005\030" +
    "\015\032\031\026\036\031\056\025\057\020\060\033\061" +
    "\023\062\022\063\021\001\002\000\054\004\044\005\060" +
    "\006\043\007\037\010\056\011\035\012\050\013\047\014" +
    "\051\016\057\017\055\020\054\021\036\022\041\023\052" +
    "\024\042\025\053\026\040\027\045\030\046\037\144\001" +
    "\002\000\004\033\uffee\001\002\000\004\037\147\001\002" +
    "\000\004\033\uffe1\001\002\000\004\033\uffe2\001\002\000" +
    "\002\001\002\000\004\033\ufff6\001\002\000\004\033\ufff7" +
    "\001\002\000\060\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010" +
    "\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\016\uffdb\017\uffdb" +
    "\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\033\uffdb\034\167\041\166\001\002" +
    "\000\054\004\044\005\060\006\043\007\037\010\056\011" +
    "\035\012\050\013\047\014\051\016\057\017\055\020\054" +
    "\021\036\022\041\023\052\024\042\025\053\026\040\027" +
    "\045\030\046\033\ufff8\001\002\000\026\005\030\015\032" +
    "\031\026\036\031\056\025\057\020\060\033\061\023\062" +
    "\022\063\021\001\002\000\056\004\044\005\060\006\043" +
    "\007\037\010\056\011\035\012\050\013\047\014\051\016" +
    "\057\017\055\020\054\021\036\022\041\023\052\024\042" +
    "\025\053\026\040\027\045\030\046\042\160\043\157\001" +
    "\002\000\026\005\030\015\032\031\026\036\031\056\025" +
    "\057\020\060\033\061\023\062\022\063\021\001\002\000" +
    "\004\033\uffc2\001\002\000\004\042\165\001\002\000\056" +
    "\004\044\005\060\006\043\007\037\010\056\011\035\012" +
    "\050\013\047\014\051\016\057\017\055\020\054\021\036" +
    "\022\041\023\052\024\042\025\053\026\040\027\045\030" +
    "\046\042\uffbf\043\163\001\002\000\026\005\030\015\032" +
    "\031\026\036\031\056\025\057\020\060\033\061\023\062" +
    "\022\063\021\001\002\000\004\042\uffc0\001\002\000\004" +
    "\033\uffc1\001\002\000\004\057\200\001\002\000\004\056" +
    "\170\001\002\000\004\036\171\001\002\000\030\005\030" +
    "\015\032\031\026\036\031\037\172\056\025\057\020\060" +
    "\033\061\023\062\022\063\021\001\002\000\004\033\uffed" +
    "\001\002\000\056\004\044\005\060\006\043\007\037\010" +
    "\056\011\035\012\050\013\047\014\051\016\057\017\055" +
    "\020\054\021\036\022\041\023\052\024\042\025\053\026" +
    "\040\027\045\030\046\037\174\043\175\001\002\000\004" +
    "\033\uffec\001\002\000\026\005\030\015\032\031\026\036" +
    "\031\056\025\057\020\060\033\061\023\062\022\063\021" +
    "\001\002\000\054\004\044\005\060\006\043\007\037\010" +
    "\056\011\035\012\050\013\047\014\051\016\057\017\055" +
    "\020\054\021\036\022\041\023\052\024\042\025\053\026" +
    "\040\027\045\030\046\037\177\001\002\000\004\033\uffeb" +
    "\001\002\000\004\042\201\001\002\000\004\033\uffe6\001" +
    "\002\000\004\046\203\001\002\000\026\005\030\015\032" +
    "\031\026\036\031\056\025\057\020\060\033\061\023\062" +
    "\022\063\021\001\002\000\056\004\044\005\060\006\043" +
    "\007\037\010\056\011\035\012\050\013\047\014\051\016" +
    "\057\017\055\020\054\021\036\022\041\023\052\024\042" +
    "\025\053\026\040\027\045\030\046\043\206\045\205\001" +
    "\002\000\006\033\uffbe\045\uffbe\001\002\000\004\044\150" +
    "\001\002\000\004\045\210\001\002\000\006\033\uffbd\045" +
    "\uffbd\001\002\000\024\035\ufffe\040\013\047\004\050\ufffe" +
    "\051\010\052\ufffe\053\ufffe\054\007\056\012\001\002\000" +
    "\012\035\uffff\050\uffff\052\uffff\053\uffff\001\002\000\054" +
    "\004\044\005\060\006\043\007\037\010\056\011\035\012" +
    "\050\013\047\014\051\016\057\017\055\020\054\021\036" +
    "\022\041\023\052\024\042\025\053\026\040\027\045\030" +
    "\046\046\214\001\002\000\014\040\013\047\004\051\010" +
    "\054\007\056\012\001\002\000\006\052\216\053\217\001" +
    "\002\000\014\040\013\047\004\051\010\054\007\056\012" +
    "\001\002\000\004\033\ufff2\001\002\000\004\053\221\001" +
    "\002\000\004\033\ufff1\001\002\000\004\036\223\001\002" +
    "\000\006\037\225\056\224\001\002\000\006\037\245\043" +
    "\244\001\002\000\004\046\226\001\002\000\016\040\013" +
    "\047\004\051\010\054\007\055\231\056\012\001\002\000" +
    "\004\033\242\001\002\000\006\033\234\035\235\001\002" +
    "\000\026\005\030\015\032\031\026\036\031\056\025\057" +
    "\020\060\033\061\023\062\022\063\021\001\002\000\004" +
    "\033\233\001\002\000\006\033\ufff9\035\ufff9\001\002\000" +
    "\004\055\236\001\002\000\004\033\uffe3\001\002\000\026" +
    "\005\030\015\032\031\026\036\031\056\025\057\020\060" +
    "\033\061\023\062\022\063\021\001\002\000\006\033\240" +
    "\035\ufffb\001\002\000\016\040\013\047\004\051\010\054" +
    "\007\055\231\056\012\001\002\000\006\033\ufffa\035\ufffa" +
    "\001\002\000\022\033\ufffc\035\ufffc\040\013\047\004\051" +
    "\010\054\007\055\231\056\012\001\002\000\006\033\ufffd" +
    "\035\ufffd\001\002\000\004\056\251\001\002\000\004\046" +
    "\246\001\002\000\016\040\013\047\004\051\010\054\007" +
    "\055\231\056\012\001\002\000\006\033\234\035\250\001" +
    "\002\000\004\033\uffe5\001\002\000\004\037\252\001\002" +
    "\000\004\046\253\001\002\000\016\040\013\047\004\051" +
    "\010\054\007\055\231\056\012\001\002\000\006\033\234" +
    "\035\255\001\002\000\004\033\uffe4\001\002\000\004\002" +
    "\000\001\002\000\004\002\001\001\002\000\054\004\044" +
    "\005\060\006\043\007\037\010\056\011\035\012\050\013" +
    "\047\014\051\016\057\017\055\020\054\021\036\022\041" +
    "\023\052\024\042\025\053\026\040\027\045\030\046\046" +
    "\261\001\002\000\014\040\013\047\004\051\010\054\007" +
    "\056\012\001\002\000\004\050\263\001\002\000\004\033" +
    "\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\012\004\013\007\010\010\004\012\005\001" +
    "\001\000\004\002\257\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\026\006\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\111\001\001\000\002" +
    "\001\001\000\004\002\106\001\001\000\004\002\104\001" +
    "\001\000\004\002\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\103\001\001\000\004\002\102\001" +
    "\001\000\004\002\101\001\001\000\004\002\100\001\001" +
    "\000\004\002\077\001\001\000\004\002\076\001\001\000" +
    "\004\002\075\001\001\000\004\002\074\001\001\000\004" +
    "\002\073\001\001\000\004\002\072\001\001\000\004\002" +
    "\071\001\001\000\004\002\070\001\001\000\004\002\067" +
    "\001\001\000\004\002\066\001\001\000\004\002\065\001" +
    "\001\000\004\002\064\001\001\000\004\002\063\001\001" +
    "\000\004\002\062\001\001\000\004\002\061\001\001\000" +
    "\004\002\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\026\006\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\153\003" +
    "\151\014\150\001\001\000\006\002\026\006\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\155" +
    "\001\001\000\002\001\001\000\006\002\161\013\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\161\013\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\013" +
    "\007\010\010\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\013\007\010\010\214\001\001\000\002" +
    "\001\001\000\010\004\013\007\010\010\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\013\007\226\011\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\026\006\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\026\006\236\001\001\000" +
    "\002\001\001\000\010\004\013\007\226\011\240\001\001" +
    "\000\002\001\001\000\010\004\013\007\226\011\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\013\007\226\011\246\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\013\007\226\011\253\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\013\007\010\010\261\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // listaExpr ::= expr 
            {
              ListaExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new ListaExpr(e,null);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaExpr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // listaExpr ::= expr COMMA listaExpr 
            {
              ListaExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ListaExpr le = (ListaExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new ListaExpr(e,le);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaExpr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // diccionario ::= LPARENCORCHETE valor DOSPUNTOS expr COMMA diccionario RPARENCORCHETE 
            {
              TEstructuradoDiccionario RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TEstructuradoDiccionario l = (TEstructuradoDiccionario)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new TEstructuradoDiccionario(e,v,l);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("diccionario",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // diccionario ::= LPARENCORCHETE valor DOSPUNTOS expr RPARENCORCHETE 
            {
              TEstructuradoDiccionario RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new TEstructuradoDiccionario(e,v,null);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("diccionario",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // elista ::= expr 
            {
              TEstructuradoLista RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new TEstructuradoLista(e);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elista",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // elista ::= expr COMMA elista 
            {
              TEstructuradoLista RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TEstructuradoLista el = (TEstructuradoLista)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new TEstructuradoLista(e, el);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elista",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exprlista ::= LPARENCUADRADO expr COMMA elista RPARENCUADRADO 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TEstructuradoLista el = (TEstructuradoLista)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new TEstructuradoLista(e, el);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlista",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exprlista ::= LPARENCUADRADO expr RPARENCUADRADO 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new TEstructuradoLista(e);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlista",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= expr MAYOR_IGUAL expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.MAYOR_IGUAL);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr MENOR_IGUAL expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.MENOR_IGUAL);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr MAYOR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.MAYOR);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= NOT expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,null,TipoOperadorBooleano.NOT);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr MENOR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.MENOR);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr DISTINTO expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.DISTINTO);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr IGUAL expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.IGUAL);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr OR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.OR);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= expr AND expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.AND);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= COMPLEMENTO expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBitwise(l,null,TipoOperadorBitwise.COMPLEMENTO);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= expr SHIFT_DER expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.SHIFT_DER);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr SHIFT_IZQ expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.SHIFT_IZQ);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr BXOR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.XOR);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr BOR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.OR);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr BAND expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.AND);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = e;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr MODULO expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.MODULO);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr DIVISION_ENTERA expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.DIVISION_ENTERA);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr EXPONENTE expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.EXPONENTE);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr MULTIPLICACION expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.MULTIPLICACION);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr DIVISION expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.DIVISION);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= RESTA expr 
            {
              Expr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Valor v = new Valor(0, null, 0,false,0, TipoValor.INT);
				RESULT = new OperacionBinaria(v,r,TipoOperadorBinario.RESTA);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr RESTA expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.RESTA);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr SUMA expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.SUMA);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= ID 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Var(i);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= LONG 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Valor v = new Valor(0, null, 0,false,new Long( l), TipoValor.LONG);
				RESULT = new Const(v);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= BOOLEAN 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Valor v = new Valor(0, null, 0, b, 0, TipoValor.BOOL);
				RESULT = new Const(v);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= STRING 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				String aux = s.substring(1, s.length()-1);
				Valor v = new Valor(0, aux, 0, false, 0, TipoValor.STRING);
				RESULT = new Const(v);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= FLOAT 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Valor v = new Valor(new Float(f), null, 0, false, 0, TipoValor.FLOAT);
				RESULT = new Const(v);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= INT 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Valor v = new Valor(0, null, new Integer(i), false, 0, TipoValor.INT);
				RESULT = new Const(v);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comm ::= ID LPAREN RPAREN 
            {
              Comm RESULT =null;
		int nomFuncleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nomFuncright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nomFunc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
				Var variable = new Var(nomFunc);
				FuncionEjecutar fe = new FuncionEjecutar(variable, null); 
				RESULT = new CommExpr(fe);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comm ::= ID LPAREN listaExpr RPAREN 
            {
              Comm RESULT =null;
		int nomFuncleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nomFuncright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String nomFunc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ListaExpr l = (ListaExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				Var variable = new Var(nomFunc);
				FuncionEjecutar fe = new FuncionEjecutar(variable, l); 
				RESULT = new CommExpr(fe);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comm ::= FDEF ID LPAREN RPAREN DOSPUNTOS lcommFunc END 
            {
              Comm RESULT =null;
		int nomFuncleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nomFuncright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String nomFunc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ListComm l = (ListComm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				Var variable = new Var(nomFunc); 
				RESULT = new FuncionDef(variable,null,l);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comm ::= FDEF ID LPAREN ID COMMA ID RPAREN DOSPUNTOS lcommFunc END 
            {
              Comm RESULT =null;
		int nomFuncleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int nomFuncright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String nomFunc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ListComm l = (ListComm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				Var variable = new Var(nomFunc);
				Var v2 = new Var(i2);
				ListaVar lv2 = new ListaVar(v2,null); 
				Var v1 = new Var(i);
				ListaVar lv = new ListaVar(v1,lv2);
				
				RESULT = new FuncionDef(variable,lv,l);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comm ::= FDEF ID LPAREN ID RPAREN DOSPUNTOS lcommFunc END 
            {
              Comm RESULT =null;
		int nomFuncleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nomFuncright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String nomFunc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ListComm l = (ListComm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				Var variable = new Var(nomFunc); 
				Var v = new Var(i);
				ListaVar lv = new ListaVar(v,null);
				RESULT = new FuncionDef(variable,lv,l);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comm ::= ID EQUAL ID LPARENCUADRADO INT RPARENCUADRADO 
            {
              Comm RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				Var asigVar = new Var(asig);
				Var variable = new Var(i1);
				Valor posicion = new Valor(0, null, new Integer(i2), false, 0, TipoValor.INT);
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, new Var("buscar"), posicion, null);
				RESULT = new Asignacion(op, asigVar);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comm ::= PRINT ID LPARENCUADRADO INT RPARENCUADRADO 
            {
              Comm RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				
				Var variable = new Var(i1);
				Valor posicion = new Valor(0, null, new Integer(i2), false, 0, TipoValor.INT);
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, new Var("buscar"), posicion, null);
				RESULT = new Print(op);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comm ::= PRINT ID DOT ID LPAREN expr COMMA expr RPAREN 
            {
              Comm RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				
				Var variable = new Var(i1);
				Var nombreFuncion = new Var(i2);
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, nombreFuncion, e1, e2);
				RESULT = new Print(op);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comm ::= PRINT ID DOT ID LPAREN expr RPAREN 
            {
              Comm RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				
				Var variable = new Var(i1);
				Var nombreFuncion = new Var(i2);
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, nombreFuncion, e, null);
				RESULT = new Print(op);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comm ::= PRINT ID DOT ID LPAREN RPAREN 
            {
              Comm RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
				
				Var variable = new Var(i1);
				Var nombreFuncion = new Var(i2);
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, nombreFuncion, null, null);
				RESULT = new Print(op);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comm ::= ID EQUAL ID DOT ID LPAREN expr COMMA expr RPAREN 
            {
              Comm RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				Var asigVar = new Var(asig);
				Var variable = new Var(i1);
				Var nombreFuncion = new Var(i2);
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, nombreFuncion, e1, e2);
				RESULT = new Asignacion(op,asigVar);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // comm ::= ID EQUAL ID DOT ID LPAREN expr RPAREN 
            {
              Comm RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				Var asigVar = new Var(asig);
				Var variable = new Var(i1);
				Var nombreFuncion = new Var(i2);
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, nombreFuncion, e, null);
				RESULT = new Asignacion(op,asigVar);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // comm ::= ID EQUAL ID DOT ID LPAREN RPAREN 
            {
              Comm RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
				Var asigVar = new Var(asig);
				Var variable = new Var(i1);
				Var nombreFuncion = new Var(i2);
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, nombreFuncion, null, null);
				RESULT = new Asignacion(op,asigVar);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // comm ::= ID DOT ID LPAREN expr COMMA expr RPAREN 
            {
              Comm RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				Var variable = new Var(i1);
				Var nombreFuncion = new Var(i2);
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, nombreFuncion, e1, e2);
				RESULT = new CommExpr(op);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // comm ::= ID DOT ID LPAREN expr RPAREN 
            {
              Comm RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				Var variable = new Var(i1);
				Var nombreFuncion = new Var(i2);
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, nombreFuncion, e, null);
				RESULT = new CommExpr(op);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // comm ::= ID DOT ID LPAREN RPAREN 
            {
              Comm RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
				Var variable = new Var(i1);
				Var nombreFuncion = new Var(i2);
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, nombreFuncion, null, null);
				RESULT = new CommExpr(op);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comm ::= IF expr DOSPUNTOS lcomm ELSE lcomm ENDIF 
            {
              Comm RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ListComm l1 = (ListComm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ListComm l2 = (ListComm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new IfThenElse(e, l1, l2);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comm ::= IF expr DOSPUNTOS lcomm ENDIF 
            {
              Comm RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ListComm l = (ListComm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new IfThen(e, l);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // comm ::= WHILE expr DOSPUNTOS lcomm ENDWHILE 
            {
              Comm RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ListComm l = (ListComm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new While(e, l);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // comm ::= PRINT expr 
            {
              Comm RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = new Print(e);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // comm ::= lvar EQUAL ID LPAREN listaExpr RPAREN 
            {
              Comm RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ListaVar lv = (ListaVar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int nomFuncleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nomFuncright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String nomFunc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ListaExpr parametros = (ListaExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				Var funcion = new Var(nomFunc);
				FuncionEjecutar fe = new FuncionEjecutar(funcion, parametros); 
				RESULT = new AsignacionFuncion(lv,fe);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // comm ::= ID EQUAL diccionario 
            {
              Comm RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TEstructuradoDiccionario d = (TEstructuradoDiccionario)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Var v = new Var(i);
				RESULT = new AsignacionDiccionario(v, d);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // comm ::= ID EQUAL exprlista 
            {
              Comm RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr el = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Var v = new Var(i);
				RESULT = new AsignacionLista(v, el);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // comm ::= ID EQUAL expr 
            {
              Comm RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				Var v = new Var(i);
				RESULT = new Asignacion(e, v); 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comm",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lcommFunc ::= FRETURN listaExpr SEPARADOR 
            {
              ListComm RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ListaExpr l = (ListaExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					
					RESULT = new ListComm(new FuncionReturn(l));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lcommFunc",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lcommFunc ::= lcommFunc SEPARADOR FRETURN listaExpr SEPARADOR lcommFunc 
            {
              ListComm RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ListComm lc = (ListComm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ListaExpr l = (ListaExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int otrolcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int otrolcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ListComm otrolc = (ListComm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					FuncionReturn fret = new FuncionReturn(l);
					ListComm sig = lc;
					ListComm elRet = new ListComm(fret);
					elRet.setSiguiente(otrolc);
					while(sig.getSiguiente() != null){
						sig=sig.getSiguiente();
					}
					sig.setSiguiente(elRet);
					RESULT = lc;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lcommFunc",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lcommFunc ::= lcommFunc SEPARADOR FRETURN listaExpr 
            {
              ListComm RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ListComm lc = (ListComm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ListaExpr l = (ListaExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					FuncionReturn fret = new FuncionReturn(l);
					ListComm sig = lc;
					while(sig.getSiguiente() != null){
						sig=sig.getSiguiente();
					}
					sig.setSiguiente(new ListComm(fret));
					RESULT = lc;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lcommFunc",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lcommFunc ::= comm SEPARADOR 
            {
              ListComm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Comm c = (Comm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					
					RESULT = new ListComm(c);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lcommFunc",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lcommFunc ::= comm SEPARADOR lcommFunc 
            {
              ListComm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Comm c = (Comm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ListComm l = (ListComm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					
					RESULT = new ListComm(c, l);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lcommFunc",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lcomm ::= comm SEPARADOR 
            {
              ListComm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Comm c = (Comm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					
					RESULT = new ListComm(c);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lcomm",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lcomm ::= comm SEPARADOR lcomm 
            {
              ListComm RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Comm c = (Comm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ListComm l = (ListComm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					
					RESULT = new ListComm(c, l);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lcomm",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // prog ::= lcomm END 
            {
              Programa RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ListComm l = (ListComm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					
					RESULT = new Programa(l);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

