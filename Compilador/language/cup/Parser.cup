package com.language;

import java.util.*;
import java_cup.runtime.*;
import com.language.*;
import com.language.model.expression.*;
import com.language.exceptions.*;

terminal SUMA, RESTA, DIVISION, MULTIPLICACION, EXPONENTE, DIVISION_ENTERA, MODULO;
terminal SHIFT_IZQ, SHIFT_DER, COMPLEMENTO, BAND, BOR, BXOR;
terminal AND, OR, DISTINTO, IGUAL, MAYOR, MENOR, MENOR_IGUAL, MAYOR_IGUAL, NOT; 
terminal EQUAL;
terminal SEPARADOR, DOT;
terminal END;
terminal LPAREN, RPAREN;
terminal PRINT;
terminal LPARENCUADRADO, RPARENCUADRADO, COMMA, LPARENCORCHETE, RPARENCORCHETE, DOSPUNTOS;
terminal WHILE, ENDWHILE, IF, ELSE, ENDIF;
//terminal FLENGTH, FHASKEY, FITEMS, FKEYS, FPOP, FVALUES, FCOUNT, FFIND, FJOIN, FSPLIT, FREPLACE, FAPPEND;
//terminal FEXTEND, FINDEX, FINSERT, FSIZE;
terminal FDEF,FRETURN;


terminal String ID;
terminal String INT;
terminal String FLOAT;
terminal String STRING;
terminal Boolean BOOLEAN;
terminal String LONG;

non terminal Expr 			expr;
non terminal Expr 			exprlista;
non terminal ListaVar		lvar;
non terminal Valor			valor;

non terminal ListaExpr listaExpr;

non terminal Comm comm;
non terminal ListComm lcomm,lcommFunc;
non terminal Programa prog;

non terminal TEstructuradoLista elista;
non terminal TEstructuradoDiccionario diccionario;


precedence left FRETURN;
precedence left SUMA, RESTA;
precedence left DIVISION, MULTIPLICACION,DIVISION_ENTERA, MODULO,BAND, BOR, BXOR, SHIFT_IZQ, SHIFT_DER;
precedence left MENOR, MAYOR, MENOR_IGUAL, MAYOR_IGUAL;
precedence left AND, OR, IGUAL, DISTINTO;
precedence left EXPONENTE, COMPLEMENTO, NOT;
precedence left DOT;
precedence left LPAREN, RPAREN;
//precedence left FEXTEND, FINDEX, FINSERT, FSIZE, FLENGTH, FHASKEY, FITEMS, FKEYS, FPOP, FVALUES, FCOUNT, FFIND, FJOIN, FSPLIT, FREPLACE, FAPPEND;
precedence left SEPARADOR;



//habria que crear el programa y setear la lista de las sentencias
prog	::=	lcomm:l END
				{:
					
					RESULT = new Programa(l);
				:};

//lista que va acumulando las sentencias
lcomm		::= comm:c SEPARADOR lcomm:l
				{:
					
					RESULT = new ListComm(c, l);
				:}
		
		| comm:c SEPARADOR
				{:
					
					RESULT = new ListComm(c);
				:};
				
lcommFunc ::= comm:c SEPARADOR lcommFunc:l
				{:
					
					RESULT = new ListComm(c, l);
				:}
		
		| comm:c SEPARADOR
				{:
					
					RESULT = new ListComm(c);
				:}
		
		
		|lcommFunc:lc SEPARADOR FRETURN listaExpr:l
				{:
					FuncionReturn fret = new FuncionReturn(l);
					ListComm sig = lc;
					while(sig.getSiguiente() != null){
						sig=sig.getSiguiente();
					}
					sig.setSiguiente(new ListComm(fret));
					RESULT = lc;
				:}
				
		|lcommFunc:lc SEPARADOR FRETURN listaExpr:l SEPARADOR lcommFunc: otrolc
				{:
					FuncionReturn fret = new FuncionReturn(l);
					ListComm sig = lc;
					ListComm elRet = new ListComm(fret);
					elRet.setSiguiente(otrolc);
					while(sig.getSiguiente() != null){
						sig=sig.getSiguiente();
					}
					sig.setSiguiente(elRet);
					RESULT = lc;
				:}
				
		|FRETURN listaExpr:l SEPARADOR
				{:
					
					RESULT = new ListComm(new FuncionReturn(l));
				:}
				
			
		;		
			
		
		
		
			
			
comm	::=  ID:i EQUAL expr:e
			{:
				Var v = new Var(i);
				RESULT = new Asignacion(e, v); 
			:}
		
		| ID:i EQUAL exprlista:el
			{:
				Var v = new Var(i);
				RESULT = new AsignacionLista(v, el);
			:}
			
		| ID:i EQUAL diccionario:d
			{:
				Var v = new Var(i);
				RESULT = new AsignacionDiccionario(v, d);
			:}
			
			
		| lvar:lv EQUAL ID:nomFunc LPAREN listaExpr:parametros RPAREN 
			{:
				Var funcion = new Var(nomFunc);
				FuncionEjecutar fe = new FuncionEjecutar(funcion, parametros); 
				RESULT = new AsignacionFuncion(lv,fe);
			:}
			
		
		| PRINT expr:e
			{:
				RESULT = new Print(e);
			:}
			 
		| WHILE expr:e DOSPUNTOS lcomm:l ENDWHILE
			{:
				RESULT = new While(e, l);
			:}
		
		| IF expr:e DOSPUNTOS lcomm:l ENDIF
			{:
				RESULT = new IfThen(e, l);
			:}
		
		| IF expr:e DOSPUNTOS lcomm:l1 ELSE lcomm:l2 ENDIF
			{:
				RESULT = new IfThenElse(e, l1, l2);
			:}
			
		
			
///*******Operaciones predefinidas en Comm*************/////////////////
			
		|ID:i1 DOT ID:i2 LPAREN RPAREN
			{:
				Var variable = new Var(i1);
				Var nombreFuncion = new Var(i2);
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, nombreFuncion, null, null);
				RESULT = new CommExpr(op);
			:}	 
			
		|ID:i1 DOT ID:i2 LPAREN expr:e RPAREN
			{:
				Var variable = new Var(i1);
				Var nombreFuncion = new Var(i2);
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, nombreFuncion, e, null);
				RESULT = new CommExpr(op);
			:}	
			
		|ID:i1 DOT ID:i2 LPAREN expr:e1 COMMA expr:e2 RPAREN
			{:
				Var variable = new Var(i1);
				Var nombreFuncion = new Var(i2);
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, nombreFuncion, e1, e2);
				RESULT = new CommExpr(op);
			:}	
			
		|ID:asig EQUAL ID:i1 DOT ID:i2 LPAREN RPAREN 
			{:
				Var asigVar = new Var(asig);
				Var variable = new Var(i1);
				Var nombreFuncion = new Var(i2);
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, nombreFuncion, null, null);
				RESULT = new Asignacion(op,asigVar);
			:}	 
			
		|ID:asig EQUAL ID:i1 DOT ID:i2 LPAREN expr:e RPAREN
			{:
				Var asigVar = new Var(asig);
				Var variable = new Var(i1);
				Var nombreFuncion = new Var(i2);
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, nombreFuncion, e, null);
				RESULT = new Asignacion(op,asigVar);
			:}	
			
		|ID:asig EQUAL ID:i1 DOT ID:i2 LPAREN expr:e1 COMMA expr:e2 RPAREN
			{:
				Var asigVar = new Var(asig);
				Var variable = new Var(i1);
				Var nombreFuncion = new Var(i2);
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, nombreFuncion, e1, e2);
				RESULT = new Asignacion(op,asigVar);
			:}
			
		|PRINT ID:i1 DOT ID:i2 LPAREN RPAREN
			{:
				
				Var variable = new Var(i1);
				Var nombreFuncion = new Var(i2);
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, nombreFuncion, null, null);
				RESULT = new Print(op);
			:}	 
			
		|PRINT ID:i1 DOT ID:i2 LPAREN expr:e RPAREN
			{:
				
				Var variable = new Var(i1);
				Var nombreFuncion = new Var(i2);
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, nombreFuncion, e, null);
				RESULT = new Print(op);
			:}	
			
		|PRINT ID:i1 DOT ID:i2 LPAREN expr:e1 COMMA expr:e2 RPAREN
			{:
				
				Var variable = new Var(i1);
				Var nombreFuncion = new Var(i2);
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, nombreFuncion, e1, e2);
				RESULT = new Print(op);
			:}		  
		
///********************************************

		| PRINT ID:i1 LPARENCUADRADO INT:i2 RPARENCUADRADO
			{:
				
				Var variable = new Var(i1);
				Valor posicion = new Valor(0, null, new Integer(i2), false, 0, TipoValor.INT);
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, new Var("buscar"), posicion, null);
				RESULT = new Print(op);
			:}
			
		| ID:asig EQUAL ID:i1 LPARENCUADRADO INT:i2 RPARENCUADRADO
			{:
				Var asigVar = new Var(asig);
				Var variable = new Var(i1);
				Valor posicion = new Valor(0, null, new Integer(i2), false, 0, TipoValor.INT);
				OperacionesPredefinidas op = new OperacionesPredefinidas(variable, new Var("buscar"), posicion, null);
				RESULT = new Asignacion(op, asigVar);
			:}	 

///*******Definicion de Funciones en Comm*************/////////////////

		|FDEF ID:nomFunc LPAREN ID:i RPAREN DOSPUNTOS lcommFunc:l END 
			{:
				Var variable = new Var(nomFunc); 
				Var v = new Var(i);
				ListaVar lv = new ListaVar(v,null);
				RESULT = new FuncionDef(variable,lv,l);
			:}
			
		|FDEF ID:nomFunc LPAREN ID:i COMMA ID:i2 RPAREN DOSPUNTOS lcommFunc:l END 
			{:
				Var variable = new Var(nomFunc);
				Var v2 = new Var(i2);
				ListaVar lv2 = new ListaVar(v2,null); 
				Var v1 = new Var(i);
				ListaVar lv = new ListaVar(v1,lv2);
				
				RESULT = new FuncionDef(variable,lv,l);
			:}
			
		|FDEF ID:nomFunc LPAREN RPAREN DOSPUNTOS lcommFunc:l END 
			{:
				Var variable = new Var(nomFunc); 
				RESULT = new FuncionDef(variable,null,l);
			:}
			
		|ID:nomFunc LPAREN listaExpr:l RPAREN
			{:
				Var variable = new Var(nomFunc);
				FuncionEjecutar fe = new FuncionEjecutar(variable, l); 
				RESULT = new CommExpr(fe);
			:}
			
		|ID:nomFunc LPAREN  RPAREN
			{:
				Var variable = new Var(nomFunc);
				FuncionEjecutar fe = new FuncionEjecutar(variable, null); 
				RESULT = new CommExpr(fe);
			:}

		
		;	
			
			
expr	::= INT:i
			{:
				Valor v = new Valor(0, null, new Integer(i), false, 0, TipoValor.INT);
				RESULT = new Const(v);
			:}

	 	| FLOAT:f
			{:
				Valor v = new Valor(new Float(f), null, 0, false, 0, TipoValor.FLOAT);
				RESULT = new Const(v);
			:}

		| STRING:s
			{:
				String aux = s.substring(1, s.length()-1);
				Valor v = new Valor(0, aux, 0, false, 0, TipoValor.STRING);
				RESULT = new Const(v);
			:}
			
		| BOOLEAN:b
			{:
				Valor v = new Valor(0, null, 0, b, 0, TipoValor.BOOL);
				RESULT = new Const(v);
			:}
			
		| LONG:l
			{:
				Valor v = new Valor(0, null, 0,false,new Long( l), TipoValor.LONG);
				RESULT = new Const(v);
			:}
			
		| ID:i
		
			{:
				RESULT = new Var(i);
			:}
			
			
//*********************operacion binaria************************

		| expr:l SUMA expr:r
			{:
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.SUMA);
			:}
 
		| expr:l RESTA expr:r
			{:
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.RESTA);
			:}
		
		| RESTA expr:r
			{:
				Valor v = new Valor(0, null, 0,false,0, TipoValor.INT);
				RESULT = new OperacionBinaria(v,r,TipoOperadorBinario.RESTA);
			:}

		| expr:l DIVISION expr:r
			{:
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.DIVISION);
			:}

		| expr:l MULTIPLICACION expr:r
			{:
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.MULTIPLICACION);
			:}
			
		| expr:l EXPONENTE expr:r
			{:
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.EXPONENTE);
			:}
			
			
		| expr:l DIVISION_ENTERA expr:r
			{:
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.DIVISION_ENTERA);
			:}
			
		| expr:l MODULO expr:r
			{:
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.MODULO);
			:}


		| LPAREN expr:e RPAREN
			{:
				RESULT = e;
			:}
			
//*******************operacion bitwise*******************
//AND, OR, XOR, SHIFT_IZQ, SHIFT_DER, COMPLEMENTO
		| expr:l BAND expr:r
			{:
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.AND);
			:}
		
		| expr:l BOR expr:r
			{:
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.OR);
			:}
		 
		| expr:l BXOR expr:r
			{:
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.XOR);
			:}
		 
		| expr:l SHIFT_IZQ expr:r
			{:
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.SHIFT_IZQ);
			:}
		
		| expr:l SHIFT_DER expr:r
			{:
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.SHIFT_DER);
			:} 
		
		| COMPLEMENTO expr:l
			{:
				RESULT = new OperacionBitwise(l,null,TipoOperadorBitwise.COMPLEMENTO);
			:}   
		
//***************Operaciones booleanas***********************************
//AND, OR, NOT, IGUAL, DISTINTO, MENOR, MAYOR, MENOR_IGUAL, MAYOR_IGUAL		
		| expr:l AND expr:r
			{:
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.AND);
			:}
		
		| expr:l OR expr:r
			{:
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.OR);
			:}
		 
		| expr:l IGUAL expr:r
			{:
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.IGUAL);
			:}
		 
		| expr:l DISTINTO expr:r
			{:
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.DISTINTO);
			:}
		
		| expr:l MENOR expr:r
			{:
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.MENOR);
			:} 
		
		| NOT expr:l
			{:
				RESULT = new OperacionBooleana(l,null,TipoOperadorBooleano.NOT);
			:}
			
		| expr:l MAYOR expr:r
			{:
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.MAYOR);
			:}
			
		| expr:l MENOR_IGUAL expr:r
			{:
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.MENOR_IGUAL);
			:}
			
		| expr:l MAYOR_IGUAL expr:r
			{:
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.MAYOR_IGUAL);
			:}
			
		
			;
			
			
			
					
//***************Listas, diccionarios, etc***********************************
			
exprlista ::=  LPARENCUADRADO expr:e RPARENCUADRADO
			{:
				RESULT = new TEstructuradoLista(e);
			:}
			
		| LPARENCUADRADO expr:e COMMA elista:el RPARENCUADRADO
			{:
				RESULT = new TEstructuradoLista(e, el);
			:}
		;


elista	::=  expr:e COMMA elista:el
			{:
				RESULT = new TEstructuradoLista(e, el);
			:}

		| expr:e
			{:
				RESULT = new TEstructuradoLista(e);
			:}
			;

			
			
diccionario ::= STRING:s DOSPUNTOS expr:e
			{:
				String aux = s.substring(1, s.length()-1);
				Valor v = new Valor(0, aux, 0, false, 0, TipoValor.STRING);
				RESULT = new TEstructuradoDiccionario(e,v,null);
			:}
		|  STRING:s DOSPUNTOS expr:e COMMA diccionario:l
			{:
				String aux = s.substring(1, s.length()-1);
				Valor v = new Valor(0, aux, 0, false, 0, TipoValor.STRING);
				RESULT = new TEstructuradoDiccionario(e,v,l);
			:}
		| LPARENCORCHETE diccionario:d RPARENCORCHETE
			{:
				
				RESULT = d;
			:}
			;
			
//***************Parametros***********************************

			
listaExpr ::= expr:e COMMA listaExpr:le
			{:
				RESULT = new ListaExpr(e,le);
			:}
		| expr:e
			{:
				RESULT = new ListaExpr(e,null);
			:}
			;
			
