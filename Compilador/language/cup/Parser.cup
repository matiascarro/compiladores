package com.language;

import java.util.*;
import java_cup.runtime.*;
import com.language.*;
import com.language.model.expression.*;
import com.language.exceptions.*;

terminal SUMA, RESTA, DIVISION, MULTIPLICACION, EXPONENTE, DIVISION_ENTERA, MODULO;
terminal SHIFT_IZQ, SHIFT_DER, COMPLEMENTO, BAND, BOR, BXOR;
terminal AND, OR, DISTINTO, IGUAL, MAYOR, MENOR, MENOR_IGUAL, MAYOR_IGUAL, NEGACION; 
terminal EQUAL;
terminal SEPARADOR;
terminal END;
terminal LPAREN, RPAREN;
terminal PRINT;
terminal LPARENCUADRADO, RPARENCUADRADO, COMMA, LPARENCORCHETE, RPARENCORCHETE, DOSPUNTOS;

terminal String ID;
terminal String INT;
terminal String FLOAT;
terminal String STRING;
terminal Boolean BOOLEAN;
terminal String LONG;

non terminal Expr expr;
non terminal Expr exprlista;

non terminal Comm comm;
non terminal ListComm lcomm;
non terminal Programa prog;

non terminal TEstructuradoLista elista;


precedence left LPAREN, RPAREN;
precedence left SUMA, RESTA;
precedence left DIVISION, MULTIPLICACION,DIVISION_ENTERA, MODULO,BAND, BOR, BXOR, SHIFT_IZQ, SHIFT_DER;
precedence left AND, OR, IGUAL, DISTINTO, MENOR, MAYOR, MENOR_IGUAL, MAYOR_IGUAL;
precedence left EXPONENTE, COMPLEMENTO, NEGACION;

//habria que crear el programa y setear la lista de las sentencias
prog	::=	lcomm:l END
				{:
					
					RESULT = new Programa(l);
				:};

//lista que va acumulando las sentencias
lcomm		::= lcomm:l SEPARADOR comm:c
				{:
					
					RESULT = new ListComm(c, l);
				:}
		
		| comm: c SEPARADOR
				{:
					
					RESULT = new ListComm(c);
				:};
			
			
comm	::=  ID:i EQUAL expr:e
			{:
				Var v = new Var(i);
				RESULT = new Asignacion(e, v);
			:}
		
		| ID:i EQUAL exprlista:el
			{:
				Var v = new Var(i);
				RESULT = new AsignacionLista(el, v);
			:}
		
		| PRINT expr:e
			{:
				RESULT = new Print(e);
			:};		
			
			
expr	::= INT:i
			{:
				Valor v = new Valor(0, null, new Integer(i), false, 0, TipoValor.INT);
				RESULT = new Const(v);
			:}

	 	| FLOAT:f
			{:
				Valor v = new Valor(new Float(f), null, 0, false, 0, TipoValor.FLOAT);
				RESULT = new Const(v);
			:}

		| STRING:s
			{:
				Valor v = new Valor(0, s, 0, false, 0, TipoValor.STRING);
				RESULT = new Const(v);
			:}
			
		| BOOLEAN:b
			{:
				Valor v = new Valor(0, null, 0, b, 0, TipoValor.BOOL);
				RESULT = new Const(v);
			:}
			
		| LONG:l
			{:
				Valor v = new Valor(0, null, 0,false,new Long( l), TipoValor.LONG);
				RESULT = new Const(v);
			:}
			
		| ID:i
		
			{:
				RESULT = new Var(i);
			:}
			
			
//*********************operacion binaria************************

		| expr:l SUMA expr:r
			{:
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.SUMA);
			:}
 
		| expr:l RESTA expr:r
			{:
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.RESTA);
			:}

		| expr:l DIVISION expr:r
			{:
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.DIVISION);
			:}

		| expr:l MULTIPLICACION expr:r
			{:
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.MULTIPLICACION);
			:}
			
		| expr:l EXPONENTE expr:r
			{:
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.EXPONENTE);
			:}
			
			
		| expr:l DIVISION_ENTERA expr:r
			{:
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.DIVISION_ENTERA);
			:}
			
		| expr:l MODULO expr:r
			{:
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.MODULO);
			:}


		| LPAREN expr:e RPAREN
			{:
				RESULT = e;
			:}
			
//*******************operacion bitwise*******************
//AND, OR, XOR, SHIFT_IZQ, SHIFT_DER, COMPLEMENTO
		| expr:l BAND expr:r
			{:
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.AND);
			:}
		
		| expr:l BOR expr:r
			{:
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.OR);
			:}
		 
		| expr:l BXOR expr:r
			{:
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.XOR);
			:}
		 
		| expr:l SHIFT_IZQ expr:r
			{:
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.SHIFT_IZQ);
			:}
		
		| expr:l SHIFT_DER expr:r
			{:
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.SHIFT_DER);
			:} 
		
		| COMPLEMENTO expr:l
			{:
				RESULT = new OperacionBitwise(l,null,TipoOperadorBitwise.COMPLEMENTO);
			:}   
		
//***************Operaciones booleanas***********************************
//AND, OR, NEGACION, IGUAL, DISTINTO, MENOR, MAYOR, MENOR_IGUAL, MAYOR_IGUAL		
		| expr:l AND expr:r
			{:
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.AND);
			:}
		
		| expr:l OR expr:r
			{:
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.OR);
			:}
		 
		| expr:l IGUAL expr:r
			{:
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.IGUAL);
			:}
		 
		| expr:l DISTINTO expr:r
			{:
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.DISTINTO);
			:}
		
		| expr:l MENOR expr:r
			{:
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.MENOR);
			:} 
		
		| NEGACION expr:l
			{:
				RESULT = new OperacionBooleana(l,null,TipoOperadorBooleano.NEGACION);
			:}
			
		| expr:l MAYOR expr:r
			{:
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.MAYOR);
			:}
			
		| expr:l MENOR_IGUAL expr:r
			{:
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.MENOR_IGUAL);
			:}
			
		| expr:l MAYOR_IGUAL expr:r
			{:
				RESULT = new OperacionBooleana(l,r,TipoOperadorBooleano.MAYOR_IGUAL);
			:};
			
						
//***************Listas, diccionarios, etc***********************************
			
exprlista ::=  LPARENCUADRADO elista:e RPARENCUADRADO
			{:
				RESULT = new TEstructuradoLista(e);
			:}
			
		| LPARENCUADRADO elista:e COMMA exprlista:el RPARENCUADRADO
			{:
				RESULT = new TEstructuradoLista(e, el);
			:}
		
		;


elista	::=  expr:e COMMA elista:el
			{:
				RESULT = new TEstructuradoLista(e, el);
			:}
		
		| LPARENCUADRADO expr:e COMMA elista:el RPARENCUADRADO
			{:
				RESULT = new TEstructuradoLista(e, el);
			:}
		
		| expr:e
			{:
				RESULT = new TEstructuradoLista(e);
			:}
			
		| LPARENCUADRADO elista:e RPARENCUADRADO
			{:
				RESULT = new TEstructuradoLista(e);
			:};	
				
			