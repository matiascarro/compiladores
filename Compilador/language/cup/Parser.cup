package com.language;

import java.util.*;
import java_cup.runtime.*;
import com.language.*;
import com.language.model.expression.*;
import com.language.exceptions.*;

terminal SUMA, RESTA, DIVISION, MULTIPLICACION, EXPONENTE, DIVISION_ENTERA, MODULO;
terminal AND, OR, XOR, SHIFT_IZQ, SHIFT_DER, COMPLEMENTO;
terminal EQUAL;
terminal SEPARADOR;
terminal END;
terminal LPAREN, RPAREN;


terminal String ID;
terminal String INTEGRAL;
terminal String DECIMAL;
terminal String STRING;

non terminal Expr expre;
non terminal Expression expr;
non terminal Comm comm;
non terminal ListComm lcomm;
non terminal Programa prog;


precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence left EQUAL;


//habria que crear el programa y setear la lista de las sentencias
prog	::=	lcomm:l END
				{:
					
					RESULT = new Programa(l);
				:};

//lista que va acumulando las sentencias
lcomm		::= lcomm:l SEPARADOR comm:c
				{:
					
					RESULT = new ListComm(c, l);
				:}
		
		| comm: c
				{:
					
					RESULT = new ListComm(c);
				:};
			
			
comm	::=  STRING:nombreVar EQUAL expre:e
			{:
				
				RESULT = new Asignacion(e, nombreVar);
			:};
			
expr	::= INTEGRAL:i
			{:
				Valor v = new Valor(0, null, i, false, 0, TipoValor.INT);
				RESULT = new Const(v);
			:};

	 	| FLOAT:f
			{:
				Valor v = new Valor(f, null, 0, false, 0, TipoValor.FLOAT);
				RESULT = new Const(v);
			:}

		| STRING:s
			{:
				Valor v = new Valor(0, s, 0, false, 0, TipoValor.STRING);
				RESULT = new Const(v);
			:}
			
		| BOOLEAN:b
			{:
				Valor v = new Valor(0, null, 0, b, 0, TipoValor.BOOL);
				RESULT = new Const(v);
			:}
			
		| LONG:l
			{:
				Valor v = new Valor(0, null, 0,false, l, TipoValor.LONG);
				RESULT = new Const(v);
			:}
			
			
//*********************operacion binaria************************

		| expr:l SUMA expr:r
			{:
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.SUMA);
			:}
 
		| expr:l RESTA expr:r
			{:
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.RESTA);
			:}

		| expr:l DIVISION expr:r
			{:
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.DIVISION);
			:}

		| expr:l MULTIPLICACION expr:r
			{:
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.MULTIPLICACION);
			:}
			
		| expr:l EXPONENTE expr:r
			{:
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.EXPONENTE);
			:}
			
		| expr:l DIVISION expr:r
			{:
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.DIVISION);
			:}
			
		| expr:l DIVISION_ENTERA expr:r
			{:
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.DIVISION_ENTERA);
			:}
			
		| expr:l MODULO expr:r
			{:
				RESULT = new OperacionBinaria(l,r,TipoOperadorBinario.MODULO);
			:}

		| ID:i
			{:
				RESULT = new Expression(i, null);
			:}

		| LPAREN expr:e RPAREN
			{:
				RESULT = e;
			:}
			
//*******************operacion bitwise*******************
//AND, OR, XOR, SHIFT_IZQ, SHIFT_DER, COMPLEMENTO
		| expr:l AND expr:r
			{:
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.AND);
			:}
		
		| expr:l OR expr:r
			{:
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.OR);
			:}
		 
		| expr:l XOR expr:r
			{:
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.XOR);
			:}
		 
		| expr:l SHIFT_IZQ expr:r
			{:
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.SHIFT_IZQ);
			:}
		
		| expr:l SHIFT_DER expr:r
			{:
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.SHIFT_DER);
			:} 
		
		| expr:l COMPLEMENTO
			{:
				RESULT = new OperacionBitwise(l,null,TipoOperadorBitwise.COMPLEMENTO);
			:}   
		
//***************Operaciones booleanas***********************************
//AND, OR, NEGACION, IGUAL, DISTINTO, MENOR, MAYOR, MENOR_IGUAL, MAYOR_IGUAL		
		| expr:l AND expr:r
			{:
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.AND);
			:}
		
		| expr:l OR expr:r
			{:
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.OR);
			:}
		 
		| expr:l IGUAL expr:r
			{:
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.IGUAL);
			:}
		 
		| expr:l DISTINTO expr:r
			{:
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.DISTINTO);
			:}
		
		| expr:l MENOR expr:r
			{:
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.MENOR);
			:} 
		
		| expr:l NEGACION
			{:
				RESULT = new OperacionBitwise(l,null,TipoOperadorBitwise.NEGACION);
			:}
			
		| expr:l MAYOR expr:r
			{:
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.MAYOR);
			:}
			
		| expr:l MENOR_IGUAL expr:r
			{:
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.MENOR_IGUAL);
			:}
			
		| expr:l MAYOR_IGUAL expr:r
			{:
				RESULT = new OperacionBitwise(l,r,TipoOperadorBitwise.MAYOR_IGUAL);
			:}
			
			
		
		;
